// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events(in *jlexer.Lexer, out *Unsubscribed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]Campaign, 0, 2)
					} else {
						out.Campaigns = []Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Campaign
					(v1).UnmarshalEasyJSON(in)
					out.Campaigns = append(out.Campaigns, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mailing-list":
			(out.MailingList).UnmarshalEasyJSON(in)
		case "recipient":
			out.Recipient = string(in.String())
		case "recipient-domain":
			out.RecipientDomain = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Tags = append(out.Tags, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ip":
			out.IP = string(in.String())
		case "client-info":
			(out.ClientInfo).UnmarshalEasyJSON(in)
		case "geolocation":
			(out.GeoLocation).UnmarshalEasyJSON(in)
		case "user-variables":
			if m, ok := out.UserVariables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserVariables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserVariables = in.Interface()
			}
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events(out *jwriter.Writer, in Unsubscribed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"campaigns\":"
		out.RawString(prefix)
		if in.Campaigns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Campaigns {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mailing-list\":"
		out.RawString(prefix)
		(in.MailingList).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"recipient-domain\":"
		out.RawString(prefix)
		out.String(string(in.RecipientDomain))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Tags {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"client-info\":"
		out.RawString(prefix)
		(in.ClientInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"geolocation\":"
		out.RawString(prefix)
		(in.GeoLocation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"user-variables\":"
		out.RawString(prefix)
		if m, ok := in.UserVariables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserVariables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserVariables))
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Unsubscribed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Unsubscribed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Unsubscribed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Unsubscribed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events1(in *jlexer.Lexer, out *Stored) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "storage":
			(out.Storage).UnmarshalEasyJSON(in)
		case "flags":
			(out.Flags).UnmarshalEasyJSON(in)
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Tags = append(out.Tags, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]Campaign, 0, 2)
					} else {
						out.Campaigns = []Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v8 Campaign
					(v8).UnmarshalEasyJSON(in)
					out.Campaigns = append(out.Campaigns, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user-variables":
			if m, ok := out.UserVariables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserVariables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserVariables = in.Interface()
			}
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events1(out *jwriter.Writer, in Stored) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"storage\":"
		out.RawString(prefix)
		(in.Storage).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		(in.Flags).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Tags {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"campaigns\":"
		out.RawString(prefix)
		if in.Campaigns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Campaigns {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user-variables\":"
		out.RawString(prefix)
		if m, ok := in.UserVariables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserVariables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserVariables))
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stored) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stored) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stored) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stored) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events1(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events2(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]RawJSON, 0, 2)
					} else {
						out.Items = []RawJSON{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v13 RawJSON
					if data := in.Raw(); in.Ok() {
						in.AddError((v13).UnmarshalJSON(data))
					}
					out.Items = append(out.Items, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "paging":
			(out.Paging).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events2(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Items {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Base64Bytes(v15)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"paging\":"
		out.RawString(prefix)
		(in.Paging).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events2(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events3(in *jlexer.Lexer, out *Rejected) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reject":
			easyjson692db02bDecode(in, &out.Reject)
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "storage":
			(out.Storage).UnmarshalEasyJSON(in)
		case "flags":
			(out.Flags).UnmarshalEasyJSON(in)
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.Tags = append(out.Tags, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]Campaign, 0, 2)
					} else {
						out.Campaigns = []Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Campaign
					(v19).UnmarshalEasyJSON(in)
					out.Campaigns = append(out.Campaigns, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user-variables":
			if m, ok := out.UserVariables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserVariables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserVariables = in.Interface()
			}
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events3(out *jwriter.Writer, in Rejected) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reject\":"
		out.RawString(prefix[1:])
		easyjson692db02bEncode(out, in.Reject)
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"storage\":"
		out.RawString(prefix)
		(in.Storage).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		(in.Flags).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Tags {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"campaigns\":"
		out.RawString(prefix)
		if in.Campaigns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Campaigns {
				if v22 > 0 {
					out.RawByte(',')
				}
				(v23).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user-variables\":"
		out.RawString(prefix)
		if m, ok := in.UserVariables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserVariables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserVariables))
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rejected) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rejected) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rejected) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rejected) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events3(l, v)
}
func easyjson692db02bDecode(in *jlexer.Lexer, out *struct {
	Reason      string `json:"reason"`
	Description string `json:"description"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reason":
			out.Reason = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncode(out *jwriter.Writer, in struct {
	Reason      string `json:"reason"`
	Description string `json:"description"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix[1:])
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events4(in *jlexer.Lexer, out *Paging) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first":
			out.First = string(in.String())
		case "next":
			out.Next = string(in.String())
		case "previous":
			out.Previous = string(in.String())
		case "last":
			out.Last = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events4(out *jwriter.Writer, in Paging) {
	out.RawByte('{')
	first := true
	_ = first
	if in.First != "" {
		const prefix string = ",\"first\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.First))
	}
	if in.Next != "" {
		const prefix string = ",\"next\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Next))
	}
	if in.Previous != "" {
		const prefix string = ",\"previous\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Previous))
	}
	if in.Last != "" {
		const prefix string = ",\"last\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Last))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Paging) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Paging) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Paging) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Paging) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events4(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events5(in *jlexer.Lexer, out *Opened) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]Campaign, 0, 2)
					} else {
						out.Campaigns = []Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v24 Campaign
					(v24).UnmarshalEasyJSON(in)
					out.Campaigns = append(out.Campaigns, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mailing-list":
			(out.MailingList).UnmarshalEasyJSON(in)
		case "recipient":
			out.Recipient = string(in.String())
		case "recipient-domain":
			out.RecipientDomain = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Tags = append(out.Tags, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ip":
			out.IP = string(in.String())
		case "client-info":
			(out.ClientInfo).UnmarshalEasyJSON(in)
		case "geolocation":
			(out.GeoLocation).UnmarshalEasyJSON(in)
		case "user-variables":
			if m, ok := out.UserVariables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserVariables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserVariables = in.Interface()
			}
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events5(out *jwriter.Writer, in Opened) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"campaigns\":"
		out.RawString(prefix)
		if in.Campaigns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Campaigns {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mailing-list\":"
		out.RawString(prefix)
		(in.MailingList).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"recipient-domain\":"
		out.RawString(prefix)
		out.String(string(in.RecipientDomain))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Tags {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"client-info\":"
		out.RawString(prefix)
		(in.ClientInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"geolocation\":"
		out.RawString(prefix)
		(in.GeoLocation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"user-variables\":"
		out.RawString(prefix)
		if m, ok := in.UserVariables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserVariables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserVariables))
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Opened) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Opened) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Opened) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Opened) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events5(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events6(in *jlexer.Lexer, out *MailingListMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Subscribed":
			out.Subscribed = bool(in.Bool())
		case "Address":
			out.Address = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Vars":
			if in.IsNull() {
				in.Skip()
				out.Vars = nil
			} else {
				in.Delim('[')
				if out.Vars == nil {
					if !in.IsDelim(']') {
						out.Vars = make([]string, 0, 4)
					} else {
						out.Vars = []string{}
					}
				} else {
					out.Vars = (out.Vars)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.Vars = append(out.Vars, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events6(out *jwriter.Writer, in MailingListMember) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Subscribed\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Subscribed))
	}
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Vars\":"
		out.RawString(prefix)
		if in.Vars == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.Vars {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailingListMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailingListMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailingListMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailingListMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events6(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events7(in *jlexer.Lexer, out *MailingListError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events7(out *jwriter.Writer, in MailingListError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailingListError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailingListError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailingListError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailingListError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events7(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events8(in *jlexer.Lexer, out *ListUploaded) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mailing-list":
			(out.MailingList).UnmarshalEasyJSON(in)
		case "is-upsert":
			out.IsUpsert = bool(in.Bool())
		case "format":
			out.Format = string(in.String())
		case "upserted-count":
			out.UpsertedCount = int(in.Int())
		case "failed-count":
			out.FailedCount = int(in.Int())
		case "member":
			(out.Member).UnmarshalEasyJSON(in)
		case "subscribed":
			out.Subscribed = bool(in.Bool())
		case "task-id":
			out.TaskID = string(in.String())
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events8(out *jwriter.Writer, in ListUploaded) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mailing-list\":"
		out.RawString(prefix[1:])
		(in.MailingList).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"is-upsert\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUpsert))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"upserted-count\":"
		out.RawString(prefix)
		out.Int(int(in.UpsertedCount))
	}
	{
		const prefix string = ",\"failed-count\":"
		out.RawString(prefix)
		out.Int(int(in.FailedCount))
	}
	{
		const prefix string = ",\"member\":"
		out.RawString(prefix)
		(in.Member).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"subscribed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Subscribed))
	}
	{
		const prefix string = ",\"task-id\":"
		out.RawString(prefix)
		out.String(string(in.TaskID))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListUploaded) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListUploaded) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListUploaded) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListUploaded) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events8(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events9(in *jlexer.Lexer, out *ListMemberUploaded) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mailing-list":
			(out.MailingList).UnmarshalEasyJSON(in)
		case "member":
			(out.Member).UnmarshalEasyJSON(in)
		case "task-id":
			out.TaskID = string(in.String())
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events9(out *jwriter.Writer, in ListMemberUploaded) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mailing-list\":"
		out.RawString(prefix[1:])
		(in.MailingList).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"member\":"
		out.RawString(prefix)
		(in.Member).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"task-id\":"
		out.RawString(prefix)
		out.String(string(in.TaskID))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListMemberUploaded) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListMemberUploaded) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListMemberUploaded) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListMemberUploaded) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events9(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events10(in *jlexer.Lexer, out *ListMemberUploadError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mailing-list":
			(out.MailingList).UnmarshalEasyJSON(in)
		case "task-id":
			out.TaskID = string(in.String())
		case "format":
			out.Format = string(in.String())
		case "member-description":
			out.MemberDescription = string(in.String())
		case "error":
			(out.Error).UnmarshalEasyJSON(in)
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events10(out *jwriter.Writer, in ListMemberUploadError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mailing-list\":"
		out.RawString(prefix[1:])
		(in.MailingList).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"task-id\":"
		out.RawString(prefix)
		out.String(string(in.TaskID))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"member-description\":"
		out.RawString(prefix)
		out.String(string(in.MemberDescription))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		(in.Error).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListMemberUploadError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListMemberUploadError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListMemberUploadError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListMemberUploadError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events10(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events11(in *jlexer.Lexer, out *Generic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events11(out *jwriter.Writer, in Generic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Generic) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Generic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Generic) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Generic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events11(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events12(in *jlexer.Lexer, out *Failed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "envelope":
			(out.Envelope).UnmarshalEasyJSON(in)
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "flags":
			(out.Flags).UnmarshalEasyJSON(in)
		case "recipient":
			out.Recipient = string(in.String())
		case "recipient-domain":
			out.RecipientDomain = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.Tags = append(out.Tags, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]Campaign, 0, 2)
					} else {
						out.Campaigns = []Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Campaign
					(v34).UnmarshalEasyJSON(in)
					out.Campaigns = append(out.Campaigns, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "delivery-status":
			(out.DeliveryStatus).UnmarshalEasyJSON(in)
		case "severity":
			out.Severity = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "user-variables":
			if m, ok := out.UserVariables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserVariables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserVariables = in.Interface()
			}
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events12(out *jwriter.Writer, in Failed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"envelope\":"
		out.RawString(prefix[1:])
		(in.Envelope).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		(in.Flags).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"recipient-domain\":"
		out.RawString(prefix)
		out.String(string(in.RecipientDomain))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Tags {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"campaigns\":"
		out.RawString(prefix)
		if in.Campaigns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Campaigns {
				if v37 > 0 {
					out.RawByte(',')
				}
				(v38).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"delivery-status\":"
		out.RawString(prefix)
		(in.DeliveryStatus).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"user-variables\":"
		out.RawString(prefix)
		if m, ok := in.UserVariables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserVariables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserVariables))
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Failed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Failed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Failed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Failed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events12(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events13(in *jlexer.Lexer, out *EventName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events13(out *jwriter.Writer, in EventName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events13(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events14(in *jlexer.Lexer, out *Delivered) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "envelope":
			(out.Envelope).UnmarshalEasyJSON(in)
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "flags":
			(out.Flags).UnmarshalEasyJSON(in)
		case "recipient":
			out.Recipient = string(in.String())
		case "recipient-domain":
			out.RecipientDomain = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.Tags = append(out.Tags, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]Campaign, 0, 2)
					} else {
						out.Campaigns = []Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v40 Campaign
					(v40).UnmarshalEasyJSON(in)
					out.Campaigns = append(out.Campaigns, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "delivery-status":
			(out.DeliveryStatus).UnmarshalEasyJSON(in)
		case "user-variables":
			if m, ok := out.UserVariables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserVariables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserVariables = in.Interface()
			}
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events14(out *jwriter.Writer, in Delivered) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"envelope\":"
		out.RawString(prefix[1:])
		(in.Envelope).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		(in.Flags).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"recipient-domain\":"
		out.RawString(prefix)
		out.String(string(in.RecipientDomain))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Tags {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"campaigns\":"
		out.RawString(prefix)
		if in.Campaigns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.Campaigns {
				if v43 > 0 {
					out.RawByte(',')
				}
				(v44).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"delivery-status\":"
		out.RawString(prefix)
		(in.DeliveryStatus).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"user-variables\":"
		out.RawString(prefix)
		if m, ok := in.UserVariables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserVariables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserVariables))
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Delivered) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Delivered) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Delivered) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Delivered) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events14(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events15(in *jlexer.Lexer, out *Complained) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]Campaign, 0, 2)
					} else {
						out.Campaigns = []Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v45 Campaign
					(v45).UnmarshalEasyJSON(in)
					out.Campaigns = append(out.Campaigns, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "recipient":
			out.Recipient = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.Tags = append(out.Tags, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user-variables":
			if m, ok := out.UserVariables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserVariables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserVariables = in.Interface()
			}
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events15(out *jwriter.Writer, in Complained) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"campaigns\":"
		out.RawString(prefix)
		if in.Campaigns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Campaigns {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.Tags {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user-variables\":"
		out.RawString(prefix)
		if m, ok := in.UserVariables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserVariables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserVariables))
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Complained) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Complained) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Complained) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Complained) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events15(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events16(in *jlexer.Lexer, out *Clicked) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]Campaign, 0, 2)
					} else {
						out.Campaigns = []Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v51 Campaign
					(v51).UnmarshalEasyJSON(in)
					out.Campaigns = append(out.Campaigns, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mailing-list":
			(out.MailingList).UnmarshalEasyJSON(in)
		case "recipient":
			out.Recipient = string(in.String())
		case "recipient-domain":
			out.RecipientDomain = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v52 string
					v52 = string(in.String())
					out.Tags = append(out.Tags, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ip":
			out.IP = string(in.String())
		case "client-info":
			(out.ClientInfo).UnmarshalEasyJSON(in)
		case "geolocation":
			(out.GeoLocation).UnmarshalEasyJSON(in)
		case "user-variables":
			if m, ok := out.UserVariables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserVariables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserVariables = in.Interface()
			}
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events16(out *jwriter.Writer, in Clicked) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"campaigns\":"
		out.RawString(prefix)
		if in.Campaigns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Campaigns {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mailing-list\":"
		out.RawString(prefix)
		(in.MailingList).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"recipient-domain\":"
		out.RawString(prefix)
		out.String(string(in.RecipientDomain))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Tags {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.String(string(v56))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"client-info\":"
		out.RawString(prefix)
		(in.ClientInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"geolocation\":"
		out.RawString(prefix)
		(in.GeoLocation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"user-variables\":"
		out.RawString(prefix)
		if m, ok := in.UserVariables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserVariables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserVariables))
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Clicked) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Clicked) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Clicked) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Clicked) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events16(l, v)
}
func easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events17(in *jlexer.Lexer, out *Accepted) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "envelope":
			(out.Envelope).UnmarshalEasyJSON(in)
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "flags":
			(out.Flags).UnmarshalEasyJSON(in)
		case "recipient":
			out.Recipient = string(in.String())
		case "recipient-domain":
			out.RecipientDomain = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "originating-ip":
			out.OriginatingIP = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v57 string
					v57 = string(in.String())
					out.Tags = append(out.Tags, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "campaigns":
			if in.IsNull() {
				in.Skip()
				out.Campaigns = nil
			} else {
				in.Delim('[')
				if out.Campaigns == nil {
					if !in.IsDelim(']') {
						out.Campaigns = make([]Campaign, 0, 2)
					} else {
						out.Campaigns = []Campaign{}
					}
				} else {
					out.Campaigns = (out.Campaigns)[:0]
				}
				for !in.IsDelim(']') {
					var v58 Campaign
					(v58).UnmarshalEasyJSON(in)
					out.Campaigns = append(out.Campaigns, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user-variables":
			if m, ok := out.UserVariables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UserVariables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UserVariables = in.Interface()
			}
		case "timestamp":
			out.Timestamp = float64(in.Float64())
		case "id":
			out.ID = string(in.String())
		case "event":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events17(out *jwriter.Writer, in Accepted) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"envelope\":"
		out.RawString(prefix[1:])
		(in.Envelope).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		(in.Flags).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"recipient-domain\":"
		out.RawString(prefix)
		out.String(string(in.RecipientDomain))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"originating-ip\":"
		out.RawString(prefix)
		out.String(string(in.OriginatingIP))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Tags {
				if v59 > 0 {
					out.RawByte(',')
				}
				out.String(string(v60))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"campaigns\":"
		out.RawString(prefix)
		if in.Campaigns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v61, v62 := range in.Campaigns {
				if v61 > 0 {
					out.RawByte(',')
				}
				(v62).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user-variables\":"
		out.RawString(prefix)
		if m, ok := in.UserVariables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UserVariables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UserVariables))
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Accepted) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Accepted) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComMailgunMailgunGoV3Events17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Accepted) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Accepted) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComMailgunMailgunGoV3Events17(l, v)
}
