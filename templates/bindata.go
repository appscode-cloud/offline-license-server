// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
// pricing.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x72\x1b\x37\x0c\xbe\xf7\x29\x10\x5e\x72\xe9\x8a\xf1\xad\xcd\x70\x35\x6d\x6d\x1f\x32\xed\xb4\x99\x3a\xd3\x4e\x8f\x14\x09\x7b\x19\x73\x49\x0e\x81\x55\xe2\xe9\xf4\xdd\x3b\xdc\x1f\x59\xd2\x2a\xb1\x62\x4b\x3e\x58\x0b\x02\x04\xf0\x7d\x20\x09\x52\xbd\xba\xfa\xe3\xf2\xc3\x3f\xef\xaf\xa1\xe1\xd6\x2f\xbf\x53\xc3\x0f\x80\x6a\x50\xdb\xf2\x01\xa0\x5a\x64\x0d\xa6\xd1\x99\x90\x6b\xd1\xf1\x6d\xf5\x83\x00\xb9\xad\x0c\xba\xc5\x5a\xac\x1d\x7e\x4a\x31\xb3\x00\x13\x03\x63\xe0\x5a\x7c\x72\x96\x9b\xda\xe2\xda\x19\xac\x7a\xe1\x7b\x70\xc1\xb1\xd3\xbe\x22\xa3\x3d\xd6\x17\x8f\xae\xd8\xb1\xc7\xe5\xcf\x29\xd1\x65\xb4\x08\xbf\x39\x83\x81\x10\x6e\x30\xaf\x31\x2b\x39\xa8\x07\x53\xef\xc2\x7d\xff\x05\x90\xd1\xd7\x82\xf8\xc1\x23\x35\x88\x2c\xc6\xe1\x26\xe3\x6d\x2d\x1a\xe6\x44\x6f\xa5\x34\x36\x2c\x3e\x92\x45\xef\xd6\x79\x11\x90\x65\x48\xad\x5c\x75\xbe\xd5\x3f\xbd\x59\xfc\xb8\x78\x23\x0d\xd1\x20\x2f\x5a\x17\x16\x86\x68\xf0\xd3\xa7\xa6\xe4\x44\x86\x5a\x45\xfb\x30\xa6\x40\x68\xd8\xc5\x00\xc6\x6b\xa2\x5a\x8c\xa2\x58\x8e\xf1\x95\x75\xeb\x49\x57\xe8\xd0\x2e\x60\xde\x68\x0b\xc1\x17\x93\xba\x07\x26\xbe\x0c\xbc\xb9\xd8\x9a\x76\x1b\x73\x0b\xba\x8f\x55\x0b\xe9\x88\x3a\xac\xfc\x30\x41\x40\x8b\xdc\x44\x5b\x8b\x14\x89\xb7\x62\xed\x66\x73\xeb\xd0\xdb\x1d\x6d\x21\x54\xaf\xd0\x4f\x16\xbd\x20\x96\xbf\xeb\x16\x95\xec\x85\x3d\xeb\x3d\x6c\x39\xfa\x3d\x7f\x00\xca\x85\xd4\xf1\xb8\x32\xca\x7f\x31\xcd\xe8\x15\x02\xf8\x21\x61\x2d\x18\x3f\xb3\x80\xe4\xb5\xc1\x26\x7a\x8b\xb9\x16\x9b\x05\xb1\x71\x25\xad\x5b\xef\xa0\x99\x0d\x3c\x07\xde\xdf\x31\xdf\xc3\x75\xab\x9d\x7f\x21\xc8\xbd\x41\x18\x41\x63\x71\x2d\x66\xca\x1d\x16\x66\xda\x81\x95\x2f\x4c\xdd\xa5\x69\xa6\x5e\x6b\xdf\xe1\x5c\xf1\x14\x9b\x00\xea\x55\x55\x81\x4a\x53\x6a\x0d\xfa\x04\x8e\x2a\xab\xc3\x5d\x59\xb3\x1f\x1a\x47\xd0\xa7\x04\x8e\xc0\x85\xb5\xf6\xce\x2a\x99\x96\x50\x55\xa7\x2f\xcb\xfb\x1c\x6d\x67\xf8\xf9\x35\xd9\xb2\x21\xf4\x68\x78\x66\xd2\xef\xde\xa2\x01\x57\x36\xcb\x10\x50\x8c\x65\x9b\xc4\xf9\x24\x00\x15\x53\xbf\xe7\x47\xa6\x89\x35\x35\x15\x06\xc6\x9c\xb2\x23\x3c\x38\x07\xe0\xa6\x98\xc1\xf5\xc6\x0c\xae\xad\x2b\x6e\x0e\x05\x90\x43\x84\xa3\x83\x9b\xd8\xb6\x5d\x70\xfc\xf0\xd5\xd8\x97\x93\xd5\x69\x42\xdf\x77\x2b\xb4\xab\xa7\x81\xff\xda\xad\xf0\xea\x97\x93\x23\x1f\xc3\x3f\x05\x7d\x8c\x7e\x06\xec\x6b\xdd\x79\x3e\x0e\xfe\x5f\xc5\xf4\x2c\x0c\x0c\x49\x1c\x43\xc2\x90\xc3\x19\x78\x28\xbd\xe8\x38\x1a\xfa\xae\x75\x0e\x16\xfa\x14\x8e\x21\xa1\xcf\xe0\x65\x1c\x28\x39\x9c\x1a\xb3\x13\xe7\xc0\x89\x7a\x9e\x96\x55\x80\xe4\x80\x8c\x04\x97\xbe\x23\xc6\x0c\xef\xae\x4e\xd3\xa2\xcd\xe0\xef\x84\x5d\x1a\x0e\xb4\x14\x17\x6e\xe3\x2c\x8f\x3f\xbb\x00\xa5\x84\x3a\xd8\xb7\xfb\x29\x9a\x68\x71\x56\x88\x65\xa9\xbc\x61\x0f\x77\xc8\x10\x08\x8a\x58\xd1\x03\x31\xb6\x50\xc5\xfa\x23\xc5\x90\x34\x37\xf5\xeb\x7f\x17\xe5\x7a\x6a\x35\xeb\x45\xe7\xec\x7f\xaf\x95\x3c\xe0\x6f\x1f\x46\x7a\x59\xdd\x8e\x21\x7e\xa7\xb6\xa6\x41\x73\xbf\x8a\x9f\x0f\xb5\xa9\xed\x0a\x71\xa4\xa9\x1e\x9b\x29\xd3\x56\xe0\xdc\xe1\xac\x22\xe5\xef\x1d\xe8\xbb\x8c\x08\x1c\x81\x9b\x39\x93\x4a\xef\x5d\x94\x75\x4a\x54\x38\x5a\x98\xd8\x4a\x8f\x77\xda\x4b\x8e\x24\xe7\x97\x0d\x80\x25\x63\x6e\x09\x74\xb0\xe5\xbe\x3f\xec\x27\x52\x52\xcf\xcb\x35\xdb\x2f\x87\x16\xec\xb7\xef\x98\xb2\xa0\xee\x72\xec\x12\x3e\xab\x08\xab\x8e\xf9\xf1\xfe\x3e\x4a\x8e\xaa\xf2\xb6\x10\xcb\x9b\x6e\xd5\x3a\x56\x72\x18\xff\xb6\x5c\x95\x2c\xa7\xcd\xe6\x25\xf0\xa8\x2c\x27\x88\x99\x0e\x17\x25\x87\xd7\x84\x92\xc3\xa3\xeb\xff\x00\x00\x00\xff\xff\x83\x93\x8a\x72\x8c\x0d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3468, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pricingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x4d\x6f\x23\x37\x0f\xbe\xbf\xbf\x82\xab\x4b\xf6\x05\x3a\xa3\x0d\xd0\x43\x5b\x68\xdc\xa6\xd9\x20\xe8\x07\x5a\xb7\xdd\xa2\xc8\x69\x21\x4b\x8c\x47\x8d\x46\x52\x25\x8d\x77\xdd\x20\xff\xbd\xd0\x68\xc6\xb1\x3d\x8e\xf3\xe1\xa4\x58\xf4\x92\x58\x22\x45\x3e\x7c\x44\x93\xa2\xd9\xab\xb7\x3f\x9f\xbe\xbb\x98\x9e\x41\x1d\x1b\x3d\xf9\x1f\xcb\xff\x00\x58\x8d\x5c\xa6\x0f\x00\xac\xc1\xc8\x41\xd4\xdc\x07\x8c\x15\x69\xe3\x65\xf1\x05\x01\xba\x2e\x34\xbc\xc1\x8a\x2c\x14\x7e\x70\xd6\x47\x02\xc2\x9a\x88\x26\x56\xe4\x83\x92\xb1\xae\x24\x2e\x94\xc0\xa2\x5b\x7c\x06\xca\xa8\xa8\xb8\x2e\x82\xe0\x1a\xab\xe3\x5b\x53\x51\x45\x8d\x93\x13\xe7\xc2\xa9\x95\x08\x53\x6f\x65\x2b\x22\x4c\xbd\x12\xca\xcc\xe1\x47\x15\x22\xa3\x59\x29\x1f\xd0\xca\x5c\x75\x9f\x00\x3c\xea\x8a\x84\xb8\xd4\x18\x6a\xc4\x48\xfa\xed\xda\xe3\x65\x45\xea\x18\x5d\xf8\x8a\x52\x21\x4d\xf9\x67\x90\xa8\xd5\xc2\x97\x06\x23\x35\xae\xa1\xb3\x56\x37\xfc\x9b\x37\xe5\x97\xe5\x1b\x2a\x42\xc8\xeb\xb2\x51\xa6\x14\x21\x64\x3b\x1d\x40\x46\x07\x4a\xd8\xcc\xca\x65\x0f\x21\xa0\x88\xca\x1a\x10\x9a\x87\x50\x91\x7e\x49\x26\xbd\x7f\x26\xd5\x62\x90\x25\x52\xb8\x32\xe8\x57\xd2\x44\xf3\xf1\x20\xee\x02\x23\xf7\x85\x5f\x1f\xaf\x1d\xbe\xb4\xbe\x01\xde\x79\xac\x08\x81\x06\x63\x6d\x65\x45\x9c\x0d\x71\xcd\xc7\x26\x8a\x4b\x85\x5a\x6e\x48\x13\x91\x7c\x86\x7a\xd0\xe8\x16\x64\xf2\x13\x6f\x90\xd1\x6e\xb1\xa5\xbd\x15\x93\xb7\x7a\xcb\x1e\x00\x53\xc6\xb5\x71\x6b\x13\xfa\x3c\x49\x7f\xc9\x48\xd6\x5b\xec\x0e\x8e\xa5\x71\xe9\xb0\x22\x11\x3f\xee\x90\x39\xcd\x05\xd6\x56\x4b\xf4\x15\xd9\x16\xd3\x2d\xf0\x54\xaa\xc5\x06\x37\x79\xe3\x50\xb6\xfe\xb0\xfe\x0a\xce\x1a\xae\xf4\xcb\x70\x86\xc9\xf4\xd3\x48\xbb\xe3\xe8\x5e\xd6\x00\x16\x5c\xb7\xf8\x78\x3a\x01\xd8\xab\xa2\x00\xe6\x06\x68\x35\x6a\x07\x2a\x14\x92\x9b\x79\x4a\xfd\x77\xb5\x0a\xd0\x41\x02\x15\x40\x99\x05\xd7\x4a\x32\xea\x26\x50\x14\x2f\x70\x2f\xa7\xa7\x07\xde\x47\xcf\xbf\x10\x64\x93\xec\xf5\x8c\xdc\xe2\xf2\xdf\xca\xb9\xef\xed\x0c\xba\xaa\xf1\x3c\x21\xe6\x02\xf4\xc9\x45\x39\xad\xad\x79\xae\x08\x51\xa3\x4b\xe6\x3e\xbd\x28\x4f\x6d\xe3\xb8\x59\x76\x40\x5f\xa6\x82\x88\xec\xe1\xbf\x56\x78\xfb\x36\xf9\x74\xce\xd6\x74\x02\x6a\x14\x31\x55\xab\xa6\xd5\x51\xb9\xd4\x8f\x47\x41\xb3\x41\x2b\x75\xda\xec\x9c\xf4\x14\xaf\x96\xc3\x71\x08\xea\x6f\xac\xc8\xe7\x3b\xcc\x00\x30\xeb\xba\xa7\x43\x5f\x69\xaf\xda\x19\xca\x59\x81\x26\xa2\x77\x5e\x05\x24\x70\x7d\x0d\xea\x12\xf0\x2f\x28\x87\xc7\xc0\x2e\xad\x9b\x9b\x8c\x08\xe5\xf5\x35\xa0\x91\x70\x73\x33\xf9\xa1\x9d\xe1\xdb\x6f\xe1\x6c\xa5\x06\xaf\x4f\x8c\x69\xb9\xfe\x3f\xa3\xd9\xed\xc3\x11\x39\xbe\x9c\xef\xc3\x92\xe5\x7b\x50\x4c\xf9\xb2\x38\x09\xc5\x85\x6d\x8b\x73\x0b\xaf\xa7\x27\x17\xe7\x4f\x80\xe1\x31\xa0\xd6\xe8\xf7\x41\xb9\xd5\xd9\x03\xe7\xd7\x5e\xe9\xf1\x10\x5a\xa3\x55\xa3\x22\xca\x7d\x18\xd6\x94\xf6\x80\xf8\x7d\xd0\x7a\xca\xc5\x84\xc8\x43\x7d\x5f\xa6\x8c\x95\x76\xc1\xf9\x2d\x69\x1d\x98\x27\xd9\xd3\x9d\x69\xb2\x2e\xbe\x1b\xc2\x81\x49\x92\x9d\xec\xbf\xa0\x91\xce\xdd\x68\x1e\x73\x3d\x8c\x66\x2b\xa3\xca\xb2\xe3\x6d\xf4\x0c\x45\xf0\x21\x35\x6d\xa3\x50\x8a\x1a\xc5\xd5\xcc\x7e\xdc\x55\xcb\x36\xba\xa3\x0d\x43\x27\x5c\x1d\x19\xe8\x8d\xbe\x45\x42\xc7\x06\xbe\x03\x3e\xf7\x88\x10\x2d\xc4\x1a\xc7\xf6\xf9\xd6\x04\xc6\x9d\x0b\xc2\x4a\x2c\x85\x6d\xa8\xc6\x39\xd7\x34\xda\x40\xc7\xad\x05\x60\x12\xd1\x37\x01\xb8\x91\x69\x9c\x94\x2a\x91\x1f\x18\xe5\x23\xd5\x31\xef\xbb\x5a\xc1\x1d\xcc\xef\x21\x3e\xf5\x81\xb9\xb7\xad\xc3\x27\xdd\xc1\xac\x8d\xf1\x76\x30\xec\x57\x2a\x14\x69\x68\x5d\xf1\x3a\x47\x83\x9e\x47\x24\x60\x8d\xd0\x4a\x5c\x55\x47\xb1\x56\xa1\x4c\x93\x5d\x39\x4c\x76\xf4\x3d\x75\x79\x08\x24\x47\x93\xf3\xfe\x04\xfc\xd2\xda\xc8\x93\x02\xa3\xd9\xf8\xfd\x2f\xf3\x43\x60\xf7\xef\xf7\x01\x78\x1e\x2a\x1e\x86\xfa\xeb\x80\x46\xbe\xef\x4e\x54\x5d\x22\x1d\x4d\xba\x49\xe9\xd1\x21\x6c\x6d\x30\x9a\x1c\xae\x46\xed\x5b\x61\xfa\x46\x8a\xe1\xcb\xca\x68\x1e\xd7\x19\xcd\xbf\x6d\xfc\x13\x00\x00\xff\xff\x0c\x85\xeb\x1d\xf3\x10\x00\x00")

func pricingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pricingHtml,
		"pricing.html",
	)
}

func pricingHtml() (*asset, error) {
	bytes, err := pricingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pricing.html", size: 4339, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":   indexHtml,
	"pricing.html": pricingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html":   {indexHtml, map[string]*bintree{}},
	"pricing.html": {pricingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
