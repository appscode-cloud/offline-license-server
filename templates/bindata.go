// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
// offerletter.html
// pricing.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x51\x73\xdc\x26\x10\x7e\xef\xaf\xd8\xf0\x92\x97\xea\x88\xdf\xda\x0c\xba\x69\x6a\xfb\x21\xd3\x4e\xeb\xa9\x33\xe9\xf4\x91\x83\xbd\x13\x31\x02\x0d\xac\x2e\xb9\xe9\xf4\xbf\x77\x10\x92\xe3\xb3\xb9\x56\xb1\x4f\x7e\xf0\x69\xd9\x6f\xe1\xe3\x5b\x16\x90\xc4\xab\xab\xdf\x2f\x3f\xfc\x75\x73\x0d\x0d\xb5\x76\xfd\x9d\xc8\x3f\x00\xa2\x41\xa9\xd3\x03\x80\x68\x91\x24\xa8\x46\x86\x88\x54\xb3\x9e\xb6\xd5\x0f\x0c\xf8\x43\xa7\x93\x2d\xd6\x6c\x6f\xf0\x73\xe7\x03\x31\x50\xde\x11\x3a\xaa\xd9\x67\xa3\xa9\xa9\x35\xee\x8d\xc2\x6a\x30\xbe\x07\xe3\x0c\x19\x69\xab\xa8\xa4\xc5\xfa\xe2\x6b\x57\x64\xc8\xe2\xfa\x5d\xd7\xc5\x4b\xaf\x11\x7e\x35\x0a\x5d\x44\xb8\xc5\xb0\xc7\x20\x78\x76\x67\xa8\x35\xee\x6e\x78\x02\x08\x68\x6b\x16\xe9\x60\x31\x36\x88\xc4\xc6\xe6\x26\xe0\xb6\x66\x0d\x51\x17\xdf\x72\xae\xb4\x5b\x7d\x8a\x1a\xad\xd9\x87\x95\x43\xe2\xae\x6b\xf9\xa6\xb7\xad\xfc\xe9\xcd\xea\xc7\xd5\x1b\xae\x62\xcc\xf6\xaa\x35\x6e\xa5\x62\xcc\xfd\x0c\xd4\x04\x9f\xc4\x10\x1b\xaf\x0f\x23\x85\x88\x8a\x8c\x77\xa0\xac\x8c\xb1\x66\xa3\xc9\xd6\xe3\xf8\x42\x9b\xfd\xe4\x4b\x72\x48\xe3\x30\xdc\x7b\x1f\xfb\x6d\xdf\xba\x08\x26\x56\xad\xdf\x18\x8b\xe9\x49\xa1\x23\x0c\xa8\x1f\xc4\x94\xa2\x12\xb4\x91\x76\x7b\x04\x4b\xf9\xbb\x98\x70\x83\x6e\xec\xb4\xae\xcd\xc5\xa3\xd0\xad\x0f\x2d\xc8\x61\x3a\x35\xe3\x26\xc6\x1e\x2b\x9b\x83\x18\xb4\x48\x8d\xd7\x35\xeb\x7c\xa4\x47\x63\x1e\xd3\xdb\x1a\xb4\xfa\x09\x22\xe5\x4e\x6e\xd0\x4e\xa8\xc1\x60\xeb\xdf\x64\x8b\x82\x0f\x46\x21\xe2\x91\x94\xc1\xdb\x42\xbf\x00\xc2\xb8\xae\xa7\x71\x31\xa6\xff\x6c\x8a\x1a\x1c\x0c\xe8\xd0\x61\xcd\x08\xbf\x10\x83\xce\x4a\x85\x8d\xb7\x1a\x43\xcd\xee\xd7\xe0\x51\x77\x5c\x9b\xfd\x93\x19\x16\x1b\x9f\x3b\xed\x3f\x7d\xb8\x83\xeb\x56\x1a\x7b\xa6\xc9\x17\x1c\x30\x0a\x82\x69\x18\x56\x04\x1c\xa9\x54\x44\x64\xe5\xfe\xa3\x8b\x63\x39\x8b\x90\xbd\xb4\x3d\x96\x9d\x73\xd5\x07\x10\xaf\xaa\x0a\x44\x37\x51\x6e\xd0\x76\xa9\x02\xb4\x74\xbb\x54\x5e\x1f\x1a\x13\x61\xa0\x09\x26\x82\x71\x7b\x69\x8d\x16\xbc\x5b\x43\x55\x2d\x9b\xca\x9b\xe0\x75\xaf\xe8\xe5\x79\x7c\x80\x8b\x68\x51\x3d\xad\xb2\x11\x98\xbd\x60\x52\x31\xe6\xc1\xd9\x98\xea\xc9\x2c\x07\x02\x08\xdf\x0d\x5b\xd7\x98\x91\x48\x32\x36\xd5\xb0\xdd\x74\xc1\x44\x3c\x19\x07\x70\x9b\xa0\x70\x7d\x0f\x85\x6b\x6d\x52\x57\xa7\x06\xe2\x79\xa4\x6f\x22\xa2\x7c\xdb\xf6\xce\xd0\xe1\x7f\x79\x5c\x4e\xc8\xf3\xd2\xb8\xeb\x37\xa8\x37\xf3\x04\xf9\xa5\xdf\xe0\xd5\xcf\x8b\x29\x32\x52\x99\x23\xc9\xc8\x64\x41\x4d\xf6\xb2\xb7\x34\x5f\x96\x8f\x09\xbe\xa8\x32\x99\xd0\x5c\x71\x32\x9f\x05\xf5\x49\xe7\xe6\x7c\x79\x86\x53\x76\x49\x75\x06\x3a\x73\xc5\x19\xd8\x2c\xa4\xcd\xde\x1f\xe4\x0e\xc3\x3c\x69\x3e\x66\xf0\x62\xca\x4c\x64\xe6\x08\x33\x71\x59\x48\x17\xe5\x5d\xf4\x16\xe7\xe9\x72\x99\xc1\xd3\xed\xed\x3c\x0c\x64\xaf\x0d\xf9\x99\x99\x79\x97\xc1\xe7\x65\xd0\x49\x97\x1a\x94\x77\xf3\x48\xdc\xdc\xe3\x5f\xc4\x43\xf0\x7c\x7a\x16\x4f\xe0\x13\x37\x8f\xe5\xaf\x83\xa9\x10\x83\x43\xc2\x08\x97\xb6\x8f\x84\x01\xde\x5f\x9d\xf7\x5a\xac\x72\xbf\x0b\xdc\x8c\xa1\x70\x2d\x33\x6e\xeb\x8b\x9c\xfe\xe8\x1d\xa4\x0a\x94\x4e\xbf\x2d\x51\x56\x5e\x97\x13\xbb\x4e\x3b\x9b\x22\x0b\x3b\x24\x70\x11\x92\x59\xc5\x43\x24\x6c\xa1\xf2\xf5\xa7\xe8\x5d\x27\xa9\xa9\x5f\xff\xbd\x4a\x6f\xa6\x5a\x92\x5c\xf5\x46\xff\xf3\x5a\xf0\x13\x7d\x96\xa6\xd7\x9d\x2f\xcf\x73\x93\x74\xb4\x1e\x54\x83\xea\x6e\xe3\xbf\x9c\xba\xfa\x3d\xcc\x28\xf9\x38\xe5\xef\x3e\x6c\xaa\x2e\x0a\x3d\x16\x33\x98\xfe\xde\x83\xdc\x05\x44\x20\x0f\xd4\x94\xd5\x16\xf2\xd1\x7b\xb4\xec\xba\x98\x74\x5c\x29\xdf\x72\x8b\x3b\x69\x39\xf9\xc8\xcb\x17\x7e\x80\x35\x61\x68\x23\x48\xa7\x41\x79\x97\xf7\xce\x28\xb8\x2c\xa7\xb6\x58\x8b\xa7\x16\xff\xf3\xab\x31\x2d\xcc\x5d\xf0\x7d\x87\x2f\x4a\xd8\xa6\x27\xfa\xfa\xfa\x3f\x5a\x26\x56\xd6\xb8\x3b\xb6\xbe\xed\x37\xad\x21\xc1\x73\xfb\xf3\xf9\x0b\x9e\x4e\xe6\xa3\x4f\x00\xc7\xa0\x23\xf3\x81\x91\x76\x38\x35\x6d\x80\x82\xe7\x0f\x17\x82\xe7\xef\x3b\xff\x06\x00\x00\xff\xff\xf2\x6c\x10\xb9\xf7\x11\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 4599, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _offerletterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdf\x6f\x23\x35\x10\xc7\xdf\xef\xaf\x98\xfa\xe5\x7a\x52\x37\x4e\xee\x04\x82\xb2\x1b\xdd\xa9\xed\x81\x10\xe5\x90\x1a\x21\x05\xc4\x83\xb3\x9e\xed\xba\xf5\xda\x2b\x7b\x36\x21\x42\xfc\xef\xc8\xfb\x23\xcd\xa6\x0b\xed\xd1\x84\xf0\xd2\xda\x9e\xf1\xd7\xf6\xc7\xe3\x8c\xbd\xf1\xc9\xe5\xa7\x8b\xd9\xfc\xa7\x2b\xc8\xa9\xd0\xd3\x57\x71\xf3\x0f\x20\xce\x51\xc8\x50\x00\x88\x0b\x24\x01\x69\x2e\x9c\x47\x4a\x58\x45\x59\xf4\x15\x03\xbe\x6d\x34\xa2\xc0\x84\x2d\x15\xae\x4a\xeb\x88\x41\x6a\x0d\xa1\xa1\x84\xad\x94\xa4\x3c\x91\xb8\x54\x29\x46\x75\xe5\x0c\x94\x51\xa4\x84\x8e\x7c\x2a\x34\x26\x93\x07\x29\x52\xa4\x71\xfa\xa1\x2c\xfd\x85\x95\x08\x9f\xb2\x0c\x1d\xfc\x80\x44\xe8\xe0\x5b\x34\xe8\x04\x59\x17\xf3\xc6\xad\xe9\xa2\x95\xb9\xaf\x4b\x00\x0e\x75\xc2\x3c\xad\x35\xfa\x1c\x91\x58\xdb\x9c\x3b\xcc\x12\x96\x13\x95\xfe\x9c\xf3\x54\x9a\xd1\x9d\x97\xa8\xd5\xd2\x8d\x0c\x12\x37\x65\xc1\x17\x95\x2e\xc4\xfb\xf1\xe8\xeb\xd1\x98\xa7\xde\x37\xf5\x51\xa1\xcc\x28\xf5\xbe\xd1\xe1\x5b\xe3\xed\x48\x56\xa6\xbc\xbf\x1d\xa5\xb6\xd5\x89\xc2\xaa\x8c\x14\xee\xfd\x97\xa3\xc9\x68\xcc\xa5\xf2\xf4\xa0\xba\xb1\x6e\xe4\x1f\xcd\xbb\xa6\xcf\x3b\xfc\xf1\xc2\xca\x75\x3b\xb8\xc7\x94\x94\x35\x90\x6a\xe1\x7d\xc2\xda\x2a\x9b\xb6\x2b\x8d\xa5\x5a\x76\xb6\xb0\x01\x42\x19\x74\x1b\xeb\xae\x5d\x57\x85\xf1\xa0\x7c\x54\xd8\x85\xd2\x18\x4a\x29\x1a\x42\x87\x72\xab\xcf\x50\xaf\xe0\x9a\x0b\x9d\xf5\xdc\x42\xc4\x4c\x3a\xbf\x7a\x87\xd8\xd3\x3b\x99\x4f\x76\x24\x32\xeb\x0a\x10\xf5\xb2\x12\xc6\xa0\x40\xca\xad\x4c\x58\x69\x3d\xed\x8c\xd6\x9f\x58\xa6\x50\xcb\x47\x1e\x61\xbf\xc4\x02\x75\xe7\x55\x57\xd8\xf4\x47\x51\x60\xcc\xeb\xca\x40\x8f\x1d\x88\xce\xea\x01\x5d\x80\x58\x99\xb2\xa2\x01\x03\xb4\x87\x21\xfc\x65\x83\xf6\x56\xbd\x16\x18\xf6\xa0\x75\x89\x09\x23\xfc\xfd\x6f\xec\xa5\x16\x29\xe6\x56\x4b\x74\x09\x1b\x72\xe1\x03\x0b\xe3\x52\x2d\x1f\x31\x6c\x1a\xf7\x45\xf6\xaa\x10\x4a\x1f\x1e\x2d\x86\x61\x5e\xc6\xf6\x1f\x24\x9e\x84\x0b\xb0\x14\xba\xc2\x97\x91\x07\x88\x4f\xa2\x08\xe2\xb2\x9b\x72\x8e\xba\x0c\x27\x4b\x0a\x73\x1b\x8e\xed\x2c\x57\x1e\xea\x69\x82\xf2\xa0\xcc\x52\x68\x25\x63\x5e\x4e\x21\x8a\x0e\xbc\x8d\x33\xd4\x58\xe6\xd6\xec\xeb\x94\xb4\xdb\x46\xa8\x59\x7f\x83\xb6\x03\x7d\x87\xfb\xb1\x42\xf8\x83\x94\x0e\xbd\xdf\xef\xca\x45\x23\x1a\x69\x65\x30\x9a\x3c\x1b\xc2\x0d\x39\x44\x82\x76\x4a\x9f\x8f\x64\xcf\x4c\xe0\x34\xcc\x1f\xde\xbe\x39\x20\x9c\xb7\xcf\x86\x33\xb3\x2b\x73\xec\x28\x69\x89\xbc\x3b\x24\x91\x77\xcf\x26\x72\xa1\x68\x7d\x06\xbf\xa8\x12\x42\xd2\x3d\x1a\x9b\xef\xed\x02\x66\xe1\x02\x70\xf8\x44\xd0\xdc\x33\xfe\x8b\x24\x7b\x63\x33\x5a\x09\x87\x70\x65\x6e\x95\x41\x74\xff\xa3\xac\x7b\x23\xb4\x70\xeb\xfd\x86\xa0\xaf\x35\x87\x43\xcf\x54\xc5\x02\xdd\x4e\xf0\x7d\x31\x1e\x8f\xc7\x0c\x0a\x65\x12\x36\x39\x6a\xec\xdd\x90\x70\x04\x97\x82\xf6\x9c\xbe\x7c\xd0\x8d\xa4\x20\x1c\xc6\xd2\x58\xf6\x9b\xc5\x4e\xa2\x68\x9f\x68\x9a\x7b\xf8\xcf\xe1\x26\x01\x1f\x9d\x2d\xf6\x0b\xc8\x06\xf5\xe8\x18\x98\x5e\xc2\xc4\x6e\x31\x99\xd9\x43\x10\x41\x23\x0f\xcc\xa3\xdf\x18\xee\x87\x4f\x11\x0a\x37\xcd\x5b\x67\xab\x12\x07\x61\x3d\x77\xb1\x8b\x8a\xe8\xe1\x41\xda\xd6\x54\x9d\xb9\xee\x59\x77\x4d\xf6\xd5\xa2\x50\xc4\xa6\xed\xc3\xaf\xff\x1c\x8c\x79\xd3\xeb\xdf\x2f\x38\xe6\xe1\xd5\xd8\x7b\xb2\xf6\x9d\x7a\xd5\xad\x4a\xcc\xdb\x17\x74\x8b\x2b\xf6\xa9\x53\x25\x81\x77\xe9\xe7\xbd\xee\xef\x06\x1f\xf7\x77\x9e\x4d\x63\xde\x68\xb6\x03\x9e\x44\x51\xf3\xeb\x64\x33\xe8\xf7\x80\x9b\xda\xaf\xbb\xda\x77\x53\x79\xc8\x51\xfc\x4e\x2c\x45\xd3\xba\xd9\x8a\xd3\xac\x32\xcd\x17\x81\xd3\x37\xf0\xc7\x66\xbd\xb5\xf2\x45\x37\x15\x41\x24\xd2\xfc\xf4\xf5\xaf\x5b\xe1\xf6\xdb\xeb\xb3\x2d\xff\x26\x15\x9e\x43\x63\x3b\xdb\x6a\x0f\x0d\x1f\xad\x2b\x04\x9d\x03\xbb\xbe\xbe\x86\xcb\x33\x98\xcf\xe7\xf3\x9e\x93\xcf\xed\xea\x3b\x14\x12\xdd\x39\x64\x42\x7b\xdc\xd8\xfe\x7c\xf3\xcd\xab\xae\x74\xda\x96\x1f\x13\xb9\x32\xf2\x09\x1e\x31\x6f\x3e\x82\xc4\xbc\xf9\x3a\xf5\x57\x00\x00\x00\xff\xff\xce\x61\xbc\x2d\xb5\x12\x00\x00")

func offerletterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_offerletterHtml,
		"offerletter.html",
	)
}

func offerletterHtml() (*asset, error) {
	bytes, err := offerletterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "offerletter.html", size: 4789, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pricingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5f\x6f\xdb\x36\x10\x7f\xdf\xa7\xb8\xf2\x25\x1d\x30\x99\xcd\xd3\xfe\x80\xf2\x96\xa5\x41\xb0\x3f\xd8\xbc\xad\xc3\x90\xa7\x82\x26\xcf\x16\x67\x8a\xe4\x48\xca\xad\x17\xe4\xbb\x0f\x14\xa5\xc4\x76\x64\x27\x8d\x1d\xac\x40\xfb\xd0\xe8\x74\x3f\xde\xfd\xee\x8e\x3e\xf2\xc4\x5e\xbc\xfe\xf5\xfc\xcd\xd5\xe4\x02\xaa\x58\xeb\xf1\x67\x2c\xff\x01\x60\x15\x72\x99\x1e\x00\x58\x8d\x91\x83\xa8\xb8\x0f\x18\x4b\xd2\xc4\x59\xf1\x15\x01\xba\xae\x34\xbc\xc6\x92\x2c\x15\xbe\x73\xd6\x47\x02\xc2\x9a\x88\x26\x96\xe4\x9d\x92\xb1\x2a\x25\x2e\x95\xc0\xa2\x15\xbe\x00\x65\x54\x54\x5c\x17\x41\x70\x8d\xe5\xe9\x9d\xa9\xa8\xa2\xc6\xf1\x99\x73\xe1\xdc\x4a\x84\x89\xb7\xb2\x11\x11\x26\x5e\x09\x65\xe6\xf0\xb3\x0a\x91\xd1\x0c\xca\x0b\xb4\x32\x8b\xf6\x09\xc0\xa3\x2e\x49\x88\x2b\x8d\xa1\x42\x8c\xa4\x7b\x5d\x79\x9c\x95\xa4\x8a\xd1\x85\x6f\x28\x15\xd2\x8c\xfe\x0e\x12\xb5\x5a\xfa\x91\xc1\x48\x8d\xab\xe9\xb4\xd1\x35\xff\xee\xd5\xe8\xeb\xd1\x2b\x2a\x42\xc8\xf2\xa8\x56\x66\x24\x42\xc8\x76\x5a\x82\x8c\xf6\x29\x61\x53\x2b\x57\x1d\x85\x80\x22\x2a\x6b\x40\x68\x1e\x42\x49\x3a\x91\x8c\x3b\xff\x4c\xaa\x65\xaf\x4b\x49\xe1\xca\xa0\xbf\xd5\x6e\xeb\x75\x53\x9b\x00\x2a\x14\xb5\x9d\x2a\x8d\xe9\x49\xa0\x89\xe8\x51\xae\xad\x19\x5a\x95\xa0\x15\xd7\xb3\x0d\x58\xaa\xe2\x69\x8f\x6b\xf3\x46\x1e\xca\x6e\x75\xba\x65\x60\x66\x7d\x0d\xbc\x0d\xaa\x24\x04\x6a\x8c\x95\x95\x25\x71\x36\xc4\x2d\x5f\x9b\xb4\x66\x0a\xb5\xbc\x87\x48\x35\xe3\x53\xd4\x3d\xaa\x15\xc8\xf8\x17\x5e\x23\xa3\xad\x30\xb0\x62\x2b\x85\xde\xea\x01\xbb\x00\x4c\x19\xd7\xc4\x01\x05\x74\xdb\x33\xfd\x4f\x06\xf5\x9d\xf5\xd6\xc0\x30\x22\xae\x1c\x96\x24\xe2\xfb\x1d\x7a\xa7\xb9\xc0\xca\x6a\x89\xbe\x24\x43\x10\x3a\x10\x18\x95\x6a\x79\x2f\x87\xf9\xe5\xb1\x32\xfb\x97\xf5\x0b\xb8\xa8\xb9\xd2\xcf\x9f\x5f\x4c\x6e\x0e\x4b\xf0\x1e\x13\x0f\x66\x18\x60\xc9\x75\x83\x87\xa5\x1f\x80\xbd\x28\x0a\x60\xae\xa7\x5c\xa1\x76\xe9\xc7\x25\xb9\x99\xa7\x5f\xee\x9b\x4a\x05\x68\x69\x82\x0a\xa0\xcc\x92\x6b\x25\x19\x75\x63\x28\x8a\x67\xae\xe5\xf9\xf9\x91\x6a\xd8\xd5\x4b\x08\xb2\x59\x98\xf5\x5d\xbe\x95\xef\xff\x6b\xff\xfe\x68\xa7\xd0\x76\xae\xe3\x86\x9e\x9b\xe1\x47\x1f\xfd\xa4\xb2\xe6\xd8\x91\xa3\x46\x97\xcc\x7e\xfc\xd1\x9f\xdb\xda\x71\xb3\x6a\x89\x3f\x7f\xf7\x12\xd9\xdb\xa7\x76\x40\x74\xd7\x80\xc3\xf3\xbb\x86\x0b\xa8\x51\xc4\xf6\x1e\xd3\xe8\xa8\x5c\xba\x77\x0c\x26\x85\xf5\xc8\x74\xa3\xc8\x44\x48\x57\x8e\x5b\xb1\x37\x01\x41\xfd\x8b\x25\xf9\x72\x87\x29\x00\x66\x5d\x7b\x13\xeb\x4e\x81\x45\x33\x45\x39\x2d\xda\xeb\x93\xf3\x2a\x20\x81\xeb\x6b\x50\x33\xc0\x7f\x60\xd4\x5f\x7e\x86\x50\x37\x37\x99\x15\xca\xeb\x6b\x40\x23\xe1\xe6\x66\xfc\x53\x33\xc5\xd7\xdf\xc3\xc5\x2d\x0c\x5e\x9e\x19\xd3\x70\xfd\x39\xa3\xd9\xed\x87\xb1\x72\x7c\x35\xdf\xc7\x27\xeb\xf7\x30\x99\xf0\x55\x71\x16\x8a\x2b\xdb\x14\x97\x16\x5e\x4e\xce\xae\x2e\x9f\x48\xc5\x63\x40\xad\xd1\xef\xa3\x73\x87\xd9\x43\xe9\xf7\x0e\xf4\x34\x1a\x8d\xd1\xaa\x56\x11\xe5\x3e\x1e\x6b\xa0\x3d\x44\xfe\xec\x51\x4f\x2d\x52\x88\x3c\x54\x0f\xed\x9c\xfb\xa0\x21\x4a\x7f\x24\xd4\x11\xf6\x4d\xf6\xb6\x73\xdb\xac\xab\x77\xd3\x38\xc2\xa6\xc9\x8e\xf6\x17\xeb\x1e\x66\x37\xa3\x0f\x2d\x15\xa3\xd9\xd2\x60\x07\xda\x71\x9f\x3b\x72\x13\x7d\x6c\x3f\xdc\x68\xb6\xa2\x42\xb1\x98\xda\xf7\xbb\xfa\xe0\xc6\x09\x6d\x43\x7f\x1a\xdf\x2e\xeb\xd3\x1f\x7d\x83\x64\xe0\xa4\x48\xff\x7e\x00\x3e\xf7\x88\x10\x2d\xc4\x0a\x87\xfd\xf0\xad\x81\x98\x3b\x17\x84\x95\x38\x12\xb6\xa6\x1a\xe7\x5c\xd3\x68\x03\x1d\x3e\xc2\x00\xc6\x11\x7d\x1d\x80\x1b\x99\x26\x7c\xa9\x52\xa1\x02\xa3\x7c\x10\x3e\x5c\xa3\x5d\xc7\xcc\x9e\x2a\x6d\xbd\xdc\x2e\x52\x3a\x67\xe6\xde\x36\x0e\x0f\xaa\xd7\xb4\x89\xf1\x6e\x8e\xef\x24\x15\x0a\xad\xcc\xe2\x36\xff\x73\x34\xe8\x79\x44\x02\xd6\x08\xad\xc4\xa2\x3c\x89\x95\x0a\xa3\x34\x25\x8f\xfa\x29\x99\xbe\xa5\x2e\x0f\xd5\xe4\x64\x7c\xd9\xad\x80\xdf\x1a\x1b\x79\x02\x30\x9a\x8d\x3f\x7e\x22\x39\x34\x84\x6e\x76\xe9\x83\xc8\x43\xd6\xe3\x22\xf8\x36\xa0\x91\x6f\xdb\x15\x65\xbb\xf9\x4e\xc6\xed\x34\xf9\xe4\x70\x06\x5e\x32\x9a\x9c\x6f\x7c\xdf\xd8\x04\x6d\x88\x6b\x42\xea\x06\xa2\x6f\x16\x8c\xe6\xaf\x32\x8c\xe6\x4f\x58\xff\x05\x00\x00\xff\xff\x67\x24\x20\x5f\xda\x12\x00\x00")

func pricingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pricingHtml,
		"pricing.html",
	)
}

func pricingHtml() (*asset, error) {
	bytes, err := pricingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pricing.html", size: 4826, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":       indexHtml,
	"offerletter.html": offerletterHtml,
	"pricing.html":     pricingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html":       {indexHtml, map[string]*bintree{}},
	"offerletter.html": {offerletterHtml, map[string]*bintree{}},
	"pricing.html":     {pricingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
