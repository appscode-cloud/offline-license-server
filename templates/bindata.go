// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcd\x6e\xdc\x36\x10\xbe\xf7\x29\x26\xbc\xe4\x52\x89\xf1\xad\x0d\x28\xa1\xad\xed\x43\xd0\xa2\x0d\xea\x5c\x7a\xa4\xc8\xf1\x8a\x31\x45\x12\x9c\xd1\x26\x8b\xa2\xef\x5e\x50\xd2\xda\xeb\xd5\xe6\xc7\x8e\x0d\x64\x0f\xb6\x86\xdf\xfc\x70\xbe\xe1\x0c\x46\xbd\xb8\xf8\xeb\xfc\xdd\x3f\x6f\x2f\xa1\xe7\xc1\xb7\x3f\xa8\xf9\x1f\x80\xea\x51\xdb\xf2\x01\xa0\x06\x64\x0d\xa6\xd7\x99\x90\x1b\x31\xf2\x75\xf5\x93\x00\x79\x08\x06\x3d\x60\x23\xb6\x0e\x3f\xa4\x98\x59\x80\x89\x81\x31\x70\x23\x3e\x38\xcb\x7d\x63\x71\xeb\x0c\x56\x93\xf0\x23\xb8\xe0\xd8\x69\x5f\x91\xd1\x1e\x9b\xb3\x3b\x57\xec\xd8\x63\xfb\x6b\x4a\x74\x1e\x2d\xc2\x1f\xce\x60\x20\x84\x2b\xcc\x5b\xcc\x4a\xce\xf0\xac\xea\x5d\xb8\x99\xbe\x00\x32\xfa\x46\x10\xef\x3c\x52\x8f\xc8\x62\x39\xee\x33\x5e\x37\xa2\x67\x4e\xf4\x5a\x4a\x63\x43\xfd\x9e\x2c\x7a\xb7\xcd\x75\x40\x96\x21\x0d\xb2\x1b\xfd\xa0\x7f\x79\x55\xff\x5c\xbf\x92\x86\x68\x96\xeb\xc1\x85\xda\x10\xcd\x7e\xa6\xab\x29\xb9\x27\x43\x75\xd1\xee\x96\x2b\x10\x1a\x76\x31\x80\xf1\x9a\xa8\x11\x8b\x28\xda\x25\xbe\xb2\x6e\xbb\xc7\x0a\x1d\xda\x05\xcc\xb7\x68\x21\xf8\x6c\x0f\x4f\x89\x1d\x40\x00\x9f\xe0\xe0\xce\x58\xf6\x67\x07\xae\xae\x63\x1e\x40\x4f\xf1\x1b\x21\x1d\xd1\x88\x95\x9f\x2d\x05\x0c\xc8\x7d\xb4\x8d\x48\x91\xf8\x5e\x90\xc3\x1b\x5e\x3b\xf4\xf6\x1e\x5a\x48\xd6\x1d\xfa\xbd\xc6\x24\x88\xf6\x4f\x3d\xa0\x92\x93\x70\xa4\x7d\x94\x6f\x8e\xfe\xc8\x1f\x80\x72\x21\x8d\x7c\x74\x08\xcb\xeb\x29\x7f\xc5\x0a\x5b\x3c\x4e\x86\x6b\x94\x77\x09\x1b\xc1\xf8\xf1\x04\x96\xbc\x36\xd8\x47\x6f\x31\x37\xe2\x18\x96\x47\x97\x97\xd6\x6d\xef\x71\xb3\x3a\x78\x0c\x59\x97\x83\x76\xfe\x79\xd8\xc2\xe2\xfa\x71\x74\x7d\xc2\xf4\xb3\x7c\x01\x6c\xb5\x1f\xf1\xe1\x44\x02\xa8\x17\x55\x05\x2a\xed\xaf\xd6\xa3\x4f\xe0\xa8\xb2\x3a\x6c\x4a\x43\xbc\xeb\x1d\xc1\x74\x25\x70\x04\x2e\x6c\xb5\x77\x56\xc9\xd4\x42\x55\x3d\x7d\x45\xde\xe6\x68\x47\xc3\x8f\xaf\xc9\x81\x0e\xa1\x47\xc3\x2b\x95\x69\x34\x14\x04\x5c\xe9\xba\x39\xa0\x58\xca\xb6\x17\xd7\x46\x00\x2a\xa6\x69\xa0\x2c\x4c\x13\x6b\xea\x2b\x0c\x8c\x39\x65\x47\x27\x7a\xa3\xfc\xda\xab\xa2\x06\x97\xb7\x6a\x70\x69\x5d\x71\xa3\xe4\xec\xee\x84\xd5\x57\x07\x37\x71\x18\xc6\xe0\x78\xf7\xd9\xd8\xe7\x7b\xad\xa7\x09\x7d\x33\x76\x68\xbb\x2f\x27\xfe\xfb\xd8\xe1\xc5\x6f\x4f\x9e\xf9\x12\xfe\x4b\xa9\x2f\xd1\xbf\x2d\x77\x25\xe7\x97\xb2\x7a\x65\x27\xba\xe8\x79\x26\x54\x49\x23\x07\x64\x24\x38\xf7\x23\x31\x66\x78\x73\xf1\x3c\x13\xcb\xcc\xfe\xbf\x9b\x11\x0f\x27\x86\x92\x0b\xd7\x51\xb4\x7f\x8f\x01\x4a\xfd\x75\xb0\xaf\x41\x99\x68\xb1\x2d\xaf\xc2\xb0\x87\x0d\x32\x04\x82\x22\x56\xb4\x23\xc6\x01\xaa\xd8\xbc\xa7\x18\x92\xe6\xbe\x79\xf9\x6f\x5d\xf6\x21\xab\x59\xd7\xa3\xb3\xff\xbd\x54\x72\x32\x2f\xf3\xec\x9b\x6a\xf7\x35\xe4\xdf\xab\xaf\xe9\xd1\xdc\x74\xf1\xe3\xa9\xf1\x34\x31\xbd\x54\x85\x23\x89\x85\xe3\x5b\x93\x7d\x2b\x70\x1e\x51\x1c\xf3\x58\x7e\x6f\x40\x6f\x32\x22\x70\x04\xee\x71\x1d\x40\x1f\x6d\x5f\x3a\x25\x2a\x3c\xd4\x26\x0e\xd2\xe3\x46\x7b\xc9\x91\xe4\xa9\xd6\x6a\x19\xf3\x40\xa0\x83\x2d\x4b\xe4\xdc\x53\xa4\xa4\x5e\xa9\xae\x7b\xe6\xd4\xa3\x7d\x78\xd7\x94\x67\xb0\xc9\x71\x4c\xf8\xa8\x22\x74\x23\xf3\xdd\x52\xb8\x48\x8e\xaa\xb2\xb0\x8a\xf6\x6a\xec\x06\xc7\x4a\xce\xe7\x0f\xbb\xab\x92\x65\xcd\xbb\x5d\x2f\xef\xc0\x32\x45\xa6\xdd\x6f\xde\x55\xe7\x15\x55\xc9\x79\x93\xff\x3f\x00\x00\xff\xff\xc9\xc8\x4c\x8a\xe1\x0b\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3041, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
