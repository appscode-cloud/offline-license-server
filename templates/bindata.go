// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
// pricing.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x72\x1b\x37\x0c\xbe\xf7\x29\x10\x5e\x72\xe9\x8a\xf1\xad\xcd\x70\x35\x6d\x6d\x1f\x32\xed\xb4\x99\x3a\xd3\x4e\x8f\x14\x09\x7b\x19\x73\x49\x0e\x81\x55\xe2\xe9\xf4\xdd\x3b\xdc\x1f\x59\xd2\x2a\xb1\x62\x4b\x3e\x58\x0b\x02\x04\xf0\x7d\x20\x09\x52\xbd\xba\xfa\xe3\xf2\xc3\x3f\xef\xaf\xa1\xe1\xd6\x2f\xbf\x53\xc3\x0f\x80\x6a\x50\xdb\xf2\x01\xa0\x5a\x64\x0d\xa6\xd1\x99\x90\x6b\xd1\xf1\x6d\xf5\x83\x00\xb9\xad\x0c\xba\xc5\x5a\xac\x1d\x7e\x4a\x31\xb3\x00\x13\x03\x63\xe0\x5a\x7c\x72\x96\x9b\xda\xe2\xda\x19\xac\x7a\xe1\x7b\x70\xc1\xb1\xd3\xbe\x22\xa3\x3d\xd6\x17\x8f\xae\xd8\xb1\xc7\xe5\xcf\x29\xd1\x65\xb4\x08\xbf\x39\x83\x81\x10\x6e\x30\xaf\x31\x2b\x39\xa8\x07\x53\xef\xc2\x7d\xff\x05\x90\xd1\xd7\x82\xf8\xc1\x23\x35\x88\x2c\xc6\xe1\x26\xe3\x6d\x2d\x1a\xe6\x44\x6f\xa5\x34\x36\x2c\x3e\x92\x45\xef\xd6\x79\x11\x90\x65\x48\xad\x5c\x75\xbe\xd5\x3f\xbd\x59\xfc\xb8\x78\x23\x0d\xd1\x20\x2f\x5a\x17\x16\x86\x68\xf0\xd3\xa7\xa6\xe4\x44\x86\x5a\x45\xfb\x30\xa6\x40\x68\xd8\xc5\x00\xc6\x6b\xa2\x5a\x8c\xa2\x58\x8e\xf1\x95\x75\xeb\x49\x57\xe8\xd0\x2e\x60\xde\x68\x0b\xc1\x17\x93\xba\x07\x26\xbe\x0c\xbc\xb9\xd8\x9a\x76\x1b\x73\x0b\xba\x8f\x55\x0b\xe9\x88\x3a\xac\xfc\x30\x41\x40\x8b\xdc\x44\x5b\x8b\x14\x89\xb7\x62\xed\x66\x73\xeb\xd0\xdb\x1d\x6d\x21\x54\xaf\xd0\x4f\x16\xbd\x20\x96\xbf\xeb\x16\x95\xec\x85\x3d\xeb\x3d\x6c\x39\xfa\x3d\x7f\x00\xca\x85\xd4\xf1\xb8\x32\xca\x7f\x31\xcd\xe8\x15\x02\xf8\x21\x61\x2d\x18\x3f\xb3\x80\xe4\xb5\xc1\x26\x7a\x8b\xb9\x16\x9b\x05\xb1\x71\x25\xad\x5b\xef\xa0\x99\x0d\x3c\x07\xde\xdf\x31\xdf\xc3\x75\xab\x9d\x7f\x21\xc8\xbd\x41\x18\x41\x63\x71\x2d\x66\xca\x1d\x16\x66\xda\x81\x95\x2f\x4c\xdd\xa5\x69\xa6\x5e\x6b\xdf\xe1\x5c\xf1\x14\x9b\x00\xea\x55\x55\x81\x4a\x53\x6a\x0d\xfa\x04\x8e\x2a\xab\xc3\x5d\x59\xb3\x1f\x1a\x47\xd0\xa7\x04\x8e\xc0\x85\xb5\xf6\xce\x2a\x99\x96\x50\x55\xa7\x2f\xcb\xfb\x1c\x6d\x67\xf8\xf9\x35\xd9\xb2\x21\xf4\x68\x78\x66\xd2\xef\xde\xa2\x01\x57\x36\xcb\x10\x50\x8c\x65\x9b\xc4\xf9\x24\x00\x15\x53\xbf\xe7\x47\xa6\x89\x35\x35\x15\x06\xc6\x9c\xb2\x23\x3c\x38\x07\xe0\xa6\x98\xc1\xf5\xc6\x0c\xae\xad\x2b\x6e\x0e\x05\x90\x43\x84\xa3\x83\x9b\xd8\xb6\x5d\x70\xfc\xf0\xd5\xd8\x97\x93\xd5\x69\x42\xdf\x77\x2b\xb4\xab\xa7\x81\xff\xda\xad\xf0\xea\x97\x93\x23\x1f\xc3\x3f\x05\x7d\x8c\x7e\x06\xec\x6b\xdd\x79\x3e\x0e\xfe\x5f\xc5\xf4\x2c\x0c\x0c\x49\x1c\x43\xc2\x90\xc3\x19\x78\x28\xbd\xe8\x38\x1a\xfa\xae\x75\x0e\x16\xfa\x14\x8e\x21\xa1\xcf\xe0\x65\x1c\x28\x39\x9c\x1a\xb3\x13\xe7\xc0\x89\x7a\x9e\x96\x55\x80\xe4\x80\x8c\x04\x97\xbe\x23\xc6\x0c\xef\xae\x4e\xd3\xa2\xcd\xe0\xef\x84\x5d\x1a\x0e\xb4\x14\x17\x6e\xe3\x2c\x8f\x3f\xbb\x00\xa5\x84\x3a\xd8\xb7\xfb\x29\x9a\x68\x71\x56\x88\x65\xa9\xbc\x61\x0f\x77\xc8\x10\x08\x8a\x58\xd1\x03\x31\xb6\x50\xc5\xfa\x23\xc5\x90\x34\x37\xf5\xeb\x7f\x17\xe5\x7a\x6a\x35\xeb\x45\xe7\xec\x7f\xaf\x95\x3c\xe0\x6f\x1f\x46\x7a\x59\xdd\x8e\x21\x7e\xa7\xb6\xa6\x41\x73\xbf\x8a\x9f\x0f\xb5\xa9\xed\x0a\x71\xa4\xa9\x1e\x9b\x29\xd3\x56\xe0\xdc\xe1\xac\x22\xe5\xef\x1d\xe8\xbb\x8c\x08\x1c\x81\x9b\x39\x93\x4a\xef\x5d\x94\x75\x4a\x54\x38\x5a\x98\xd8\x4a\x8f\x77\xda\x4b\x8e\x24\xe7\x97\x0d\x80\x25\x63\x6e\x09\x74\xb0\xe5\xbe\x3f\xec\x27\x52\x52\xcf\xcb\x35\xdb\x2f\x87\x16\xec\xb7\xef\x98\xb2\xa0\xee\x72\xec\x12\x3e\xab\x08\xab\x8e\xf9\xf1\xfe\x3e\x4a\x8e\xaa\xf2\xb6\x10\xcb\x9b\x6e\xd5\x3a\x56\x72\x18\xff\xb6\x5c\x95\x2c\xa7\xcd\xe6\x25\xf0\xa8\x2c\x27\x88\x99\x0e\x17\x25\x87\xd7\x84\x92\xc3\xa3\xeb\xff\x00\x00\x00\xff\xff\x83\x93\x8a\x72\x8c\x0d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3468, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pricingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x4d\x6f\x23\x37\x0f\xbe\xbf\xbf\x82\xab\x4b\xf6\x05\x3a\xa3\xcd\xa9\x1f\xd0\xb8\x4d\xb3\x41\xd0\x0f\xb4\x6e\xbb\x45\x91\xd3\x42\x96\x18\x8f\x1a\x8d\xa4\x4a\x1a\xef\xba\x41\xfe\x7b\xa1\xd1\x8c\x63\x7b\x1c\xe7\xc3\x49\xb1\xe8\x25\xb1\x44\x8a\x7c\xf8\x88\x26\x45\xb3\x57\x6f\x7f\x3e\x7d\x77\x31\x3d\x83\x3a\x36\x7a\xf2\x3f\x96\xff\x01\xb0\x1a\xb9\x4c\x1f\x00\x58\x83\x91\x83\xa8\xb9\x0f\x18\x2b\xd2\xc6\xcb\xe2\x0b\x02\x74\x5d\x68\x78\x83\x15\x59\x28\xfc\xe0\xac\x8f\x04\x84\x35\x11\x4d\xac\xc8\x07\x25\x63\x5d\x49\x5c\x28\x81\x45\xb7\xf8\x0c\x94\x51\x51\x71\x5d\x04\xc1\x35\x56\xc7\xb7\xa6\xa2\x8a\x1a\x27\x27\xce\x85\x53\x2b\x11\xa6\xde\xca\x56\x44\x98\x7a\x25\x94\x99\xc3\x8f\x2a\x44\x46\xb3\x52\x3e\xa0\x95\xb9\xea\x3e\x01\x78\xd4\x15\x09\x71\xa9\x31\xd4\x88\x91\xf4\xdb\xb5\xc7\xcb\x8a\xd4\x31\xba\xf0\x15\xa5\x42\x9a\xf2\xcf\x20\x51\xab\x85\x2f\x0d\x46\x6a\x5c\x43\x67\xad\x6e\xf8\x37\x6f\xca\x2f\xcb\x37\x54\x84\x90\xd7\x65\xa3\x4c\x29\x42\xc8\x76\x3a\x80\x8c\x0e\x94\xb0\x99\x95\xcb\x1e\x42\x40\x11\x95\x35\x20\x34\x0f\xa1\x22\xfd\x92\x4c\x7a\xff\x4c\xaa\xc5\x20\x4b\xa4\x70\x65\xd0\xaf\xa4\x89\xe6\xe3\x41\xdc\x05\x46\xee\x0b\xbf\x3e\x5e\x3b\x7c\x69\x7d\x03\xbc\xf3\x58\x11\x02\x0d\xc6\xda\xca\x8a\x38\x1b\xe2\x9a\x8f\x4d\x14\x97\x0a\xb5\xdc\x90\x26\x22\xf9\x0c\xf5\xa0\xd1\x2d\xc8\xe4\x27\xde\x20\xa3\xdd\x62\x4b\x7b\x2b\x26\x6f\xf5\x96\x3d\x00\xa6\x8c\x6b\xe3\xd6\x26\xf4\x79\x92\xfe\x92\x91\xac\xb7\xd8\x1d\x1c\x4b\xe3\xd2\x61\x45\x22\x7e\xdc\x21\x73\x9a\x0b\xac\xad\x96\xe8\x2b\xb2\x2d\xa6\x5b\xe0\xa9\x54\x8b\x0d\x6e\xf2\xc6\xa1\x6c\xfd\x61\xfd\x15\x9c\x35\x5c\xe9\x97\xe1\x0c\x93\xe9\xa7\x91\x76\xc7\xd1\xbd\xac\x01\x2c\xb8\x6e\xf1\xf1\x74\x02\xb0\x57\x45\x01\xcc\x0d\xd0\x6a\xd4\x0e\x54\x28\x24\x37\xf3\x94\xfa\xef\x6a\x15\xa0\x83\x04\x2a\x80\x32\x0b\xae\x95\x64\xd4\x4d\xa0\x28\x5e\xe0\x5e\x4e\x4f\x0f\xbc\x8f\x9e\x7f\x21\xc8\x26\xd9\xeb\x19\xb9\xc5\xe5\xbf\x95\x73\xdf\xdb\x19\x74\x55\xe3\x79\x42\xcc\x05\xe8\x93\x8b\x72\x5a\x5b\xf3\x5c\x11\xa2\x46\x97\xcc\x7d\x7a\x51\x9e\xda\xc6\x71\xb3\xec\x80\xbe\x4c\x05\x11\xd9\xc3\x7f\xad\xf0\xf6\x6d\xf2\xe9\x9c\xad\xe9\x04\xd4\x28\x62\xaa\x56\x4d\xab\xa3\x72\xa9\x1f\x8f\x82\x66\x83\x56\xea\xb4\xd9\x39\xe9\x29\x5e\x2d\x87\xe3\x10\xd4\xdf\x58\x91\xcf\x77\x98\x01\x60\xd6\x75\x4f\x87\xbe\xd2\x5e\xb5\x33\x94\xb3\x02\x4d\x44\xef\xbc\x0a\x48\xe0\xfa\x1a\xd4\x25\xe0\x5f\x50\x0e\x8f\x81\x5d\x5a\x37\x37\x19\x11\xca\xeb\x6b\x40\x23\xe1\xe6\x66\xf2\x43\x3b\xc3\xb7\xdf\xc2\xd9\x4a\x0d\x5e\x9f\x18\xd3\x72\xfd\x7f\x46\xb3\xdb\x87\x23\x72\x7c\x39\xdf\x87\x25\xcb\xf7\xa0\x98\xf2\x65\x71\x12\x8a\x0b\xdb\x16\xe7\x16\x5e\x4f\x4f\x2e\xce\x9f\x00\xc3\x63\x40\xad\xd1\xef\x83\x72\xab\xb3\x07\xce\xaf\xbd\xd2\xe3\x21\xb4\x46\xab\x46\x45\x94\xfb\x30\xac\x29\xed\x01\xf1\xfb\xa0\xf5\x94\x8b\x09\x91\x87\xfa\xbe\x4c\x19\x2b\xed\x82\xf3\x5b\xd2\x3a\x30\x4f\xb2\xa7\x3b\xd3\x64\x5d\x7c\x37\x84\x03\x93\x24\x3b\xd9\x7f\x41\x23\x9d\xbb\xd1\x3c\xe6\x7a\x18\xcd\x56\x46\x95\x65\xc7\xdb\xe8\x19\x8a\xe0\x43\x6a\xda\x46\xa1\x14\x35\x8a\xab\x99\xfd\xb8\xab\x96\x6d\x74\x47\x1b\x86\x4e\xb8\x3a\x32\xd0\x1b\x7d\x8b\x84\x8e\x0d\x7c\x07\x7c\xee\x11\x21\x5a\x88\x35\x8e\xed\xf3\xad\x09\x8c\x3b\x17\x84\x95\x58\x0a\xdb\x50\x8d\x73\xae\x69\xb4\x81\x8e\x5b\x0b\xc0\x24\xa2\x6f\x02\x70\x23\xd3\x38\x29\x55\x22\x3f\x30\xca\x47\xaa\x63\xde\x77\xb5\x82\x3b\x98\xdf\x43\x7c\xea\x03\x73\x6f\x5b\x87\x4f\xba\x83\x59\x1b\xe3\xed\x60\xd8\xaf\x54\x28\xd2\xd0\xba\xe2\x75\x8e\x06\x3d\x8f\x48\xc0\x1a\xa1\x95\xb8\xaa\x8e\x62\xad\x42\x99\x26\xbb\x72\x98\xec\xe8\x7b\xea\xf2\x10\x48\x8e\x26\xe7\xfd\x09\xf8\xa5\xb5\x91\x27\x05\x46\xb3\xf1\xfb\x5f\xe6\x87\xc0\xee\xdf\xef\x03\xf0\x3c\x54\x3c\x0c\xf5\xd7\x01\x8d\x7c\xdf\x9d\xa8\xba\x44\x3a\x9a\x74\x93\xd2\xa3\x43\xd8\xda\x60\x34\x39\x5c\x8d\xda\xb7\xc2\xf4\x8d\x14\xc3\x97\x95\xd1\x3c\xae\x33\x9a\x7f\xdb\xf8\x27\x00\x00\xff\xff\x68\xe8\xa3\x2d\xf3\x10\x00\x00")

func pricingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pricingHtml,
		"pricing.html",
	)
}

func pricingHtml() (*asset, error) {
	bytes, err := pricingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pricing.html", size: 4339, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":   indexHtml,
	"pricing.html": pricingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html":   {indexHtml, map[string]*bintree{}},
	"pricing.html": {pricingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
