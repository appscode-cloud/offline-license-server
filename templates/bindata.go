// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x6f\xdb\x36\x10\x7f\xdf\xa7\xb8\xf2\xa5\x2f\x93\xd9\xbc\x6d\x05\x25\x6c\x4b\xf2\x50\x6c\xd8\x8a\xa5\xd8\xb0\x47\x9a\x3c\x5b\x6c\x28\x92\xe0\x9d\xdc\x1a\xc3\xbe\xfb\x40\x49\x4e\x1c\xcb\x6d\x9d\x34\x06\xaa\x07\x5b\xc7\xfb\xff\x23\x8f\xa7\x53\x2f\xae\xfe\xb8\x7c\xf7\xcf\xdb\x6b\x68\xb9\xf3\xcd\x77\x6a\xfc\x03\x50\x2d\x6a\x5b\x5e\x00\x54\x87\xac\xc1\xb4\x3a\x13\x72\x2d\x7a\x5e\x55\x3f\x08\x90\xfb\xcc\xa0\x3b\xac\xc5\xc6\xe1\x87\x14\x33\x0b\x30\x31\x30\x06\xae\xc5\x07\x67\xb9\xad\x2d\x6e\x9c\xc1\x6a\x20\xbe\x07\x17\x1c\x3b\xed\x2b\x32\xda\x63\x7d\x71\x6f\x8a\x1d\x7b\x6c\x7e\x4e\x89\x2e\xa3\x45\xf8\xcd\x19\x0c\x84\x70\x83\x79\x83\x59\xc9\x91\x3d\x8a\x7a\x17\x6e\x87\x37\x80\x8c\xbe\x16\xc4\x5b\x8f\xd4\x22\xb2\x98\x96\xdb\x8c\xab\x5a\xb4\xcc\x89\x5e\x4b\x69\x6c\x58\xbc\x27\x8b\xde\x6d\xf2\x22\x20\xcb\x90\x3a\xb9\xec\x7d\xa7\x7f\x7a\xb5\xf8\x71\xf1\x4a\x1a\xa2\x91\x5e\x74\x2e\x2c\x0c\xd1\x68\x67\x08\x4d\xc9\x1d\x18\x6a\x19\xed\x76\x0a\x81\xd0\xb0\x8b\x01\x8c\xd7\x44\xb5\x98\x48\xd1\x4c\xfe\x95\x75\x9b\x1d\xaf\xc0\xa1\x5d\xc0\x7c\xc7\x2d\x00\x5f\xec\xd8\x43\x62\x7b\x2c\x80\x4f\x60\x70\xaf\x2c\xdb\x8b\x3d\x53\xab\x98\x3b\xd0\x83\xff\x5a\x48\x47\xd4\x63\xe5\x47\x4d\x01\x1d\x72\x1b\x6d\x2d\x52\x24\x7e\xe0\x64\x3f\xc2\x95\x43\x6f\x1f\x70\x0b\xc8\x7a\x89\x7e\x27\x31\x10\xa2\xf9\x5d\x77\xa8\xe4\x40\x1c\x48\x1f\xe4\x9b\xa3\x3f\xb0\x07\xa0\x5c\x48\x3d\x1f\x2c\xc2\x74\x7a\xca\xaf\x98\xf1\x26\x8b\x83\xe2\x9c\xcb\xdb\x84\xb5\x60\xfc\x78\x84\x97\xbc\x36\xd8\x46\x6f\x31\xd7\xe2\x90\x2d\x0f\x82\x97\xd6\x6d\x1e\x60\x33\x5b\x78\x0a\x58\x7f\xc7\x7c\x0b\xd7\x9d\x76\xfe\x3c\x90\x61\x31\xfd\x34\xcc\x3e\xa1\xfa\x59\xd0\x00\x36\xda\xf7\xf8\x78\x34\x01\xd4\x8b\xaa\x02\x95\x76\xa1\xb5\xe8\x13\x38\xaa\xac\x0e\xeb\x52\x15\xef\x5a\x47\x30\x84\x04\x8e\xc0\x85\x8d\xf6\xce\x2a\x99\x1a\xa8\xaa\xe7\xdf\x96\xb7\x39\xda\xde\xf0\xd3\xf7\x64\x4f\x86\xd0\xa3\xe1\x99\xc8\x70\x3f\x14\x0e\xb8\x52\x7a\xa3\x43\x31\x6d\xdb\x8e\x9c\x2b\x01\xa8\x98\x86\x5b\x65\x42\x9a\x58\x53\x5b\x61\x60\xcc\x29\x3b\x3a\x52\x20\xe5\x69\x6e\x8a\x18\x5c\xdf\x89\xc1\xb5\x75\xc5\x8c\x92\xa3\xb9\x23\x5a\x27\x3b\x37\xb1\xeb\xfa\xe0\x78\xfb\x59\xdf\x97\x3b\xa9\xe7\x71\x7d\xdb\x2f\xd1\x2e\xbf\x9c\xf8\xaf\xfd\x12\xaf\x7e\x79\xf6\xcc\x27\xf7\x5f\x4a\x7d\xf2\x7e\x86\xdc\x37\xba\xf7\x7c\x5a\xfa\x7f\x15\xd1\xb3\x20\x30\x06\x71\x0a\x08\x63\x0c\x67\xc0\xa1\x74\xb6\xd3\x60\x18\x7a\xe0\x39\x50\x18\x42\x38\x05\x84\x21\x82\xaf\xc3\x40\xc9\xf1\xd6\x98\xdd\x38\x47\x6e\xd4\xf3\xb4\xac\x92\x48\x0e\xc8\x48\x70\xe9\x7b\x62\xcc\xf0\xe6\xea\x3c\xdd\xcb\x8c\xf6\xbf\x99\x9e\x0f\x47\x1a\x94\x0b\xab\x28\x9a\x3f\xfb\x00\xe5\x04\xe8\x60\x5f\x83\x32\xd1\x62\x53\x4e\x86\x61\x0f\x6b\x64\x08\x04\x85\xac\x68\x4b\x8c\x1d\x54\xb1\x7e\x4f\x31\x24\xcd\x6d\xfd\xf2\xdf\x45\xf9\x40\xb6\x9a\xf5\xa2\x77\xf6\xbf\x97\x4a\x0e\xea\xa5\xb7\x7d\xd5\xde\x9d\x02\xfe\x83\xfd\x35\x2d\x9a\xdb\x65\xfc\x78\xac\x55\x0d\x48\x4f\xbb\xc2\x91\xc4\x84\xf1\x9d\xca\xae\x1c\x38\xf7\x28\x0e\x71\x2c\xcf\x1b\xd0\xeb\x8c\x08\x1c\x81\x5b\x9c\x3b\xd0\x07\x9f\xe3\x3a\x25\x2a\x38\x2c\x4c\xec\xa4\xc7\xb5\xf6\x92\x23\xc9\x63\xc5\xd5\x30\xe6\x8e\x40\x07\x5b\xa6\x8a\xb1\xa6\x48\x49\x3d\x13\x9d\xd7\xcc\xb1\x43\xfb\xf8\xaa\x29\xc7\x60\x9d\x63\x9f\xf0\x49\x9b\xb0\xec\x99\xef\xa7\x84\x89\x72\x54\x95\x09\x46\x34\x37\xfd\xb2\x73\xac\xe4\xb8\xfe\xb8\x58\x95\x2c\x37\xce\xdd\xbc\x71\xcf\x2c\xb7\xc8\x30\x0c\x8c\xc3\xcb\x38\xb3\x28\x39\x8e\x76\xff\x07\x00\x00\xff\xff\x79\x35\xe5\xb3\xf2\x0d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3570, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
