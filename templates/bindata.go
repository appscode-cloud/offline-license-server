// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
// offerletter.html
// pricing.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x51\x73\xdc\x26\x10\x7e\xef\xaf\xd8\xf0\x92\x97\xea\x88\xdf\xda\x0c\xba\x69\x6a\xfb\x21\xd3\x4e\xeb\xa9\x33\xe9\xf4\x91\x83\xbd\x13\x31\x02\x0d\xac\x2e\xb9\xe9\xf4\xbf\x77\x10\x92\xe3\xb3\xb9\x56\xb1\x4f\x7e\xf0\x69\xd9\x6f\xe1\xe3\x5b\x16\x90\xc4\xab\xab\xdf\x2f\x3f\xfc\x75\x73\x0d\x0d\xb5\x76\xfd\x9d\xc8\x3f\x00\xa2\x41\xa9\xd3\x03\x80\x68\x91\x24\xa8\x46\x86\x88\x54\xb3\x9e\xb6\xd5\x0f\x0c\xf8\x43\xa7\x93\x2d\xd6\x6c\x6f\xf0\x73\xe7\x03\x31\x50\xde\x11\x3a\xaa\xd9\x67\xa3\xa9\xa9\x35\xee\x8d\xc2\x6a\x30\xbe\x07\xe3\x0c\x19\x69\xab\xa8\xa4\xc5\xfa\xe2\x6b\x57\x64\xc8\xe2\xfa\x5d\xd7\xc5\x4b\xaf\x11\x7e\x35\x0a\x5d\x44\xb8\xc5\xb0\xc7\x20\x78\x76\x67\xa8\x35\xee\x6e\x78\x02\x08\x68\x6b\x16\xe9\x60\x31\x36\x88\xc4\xc6\xe6\x26\xe0\xb6\x66\x0d\x51\x17\xdf\x72\xae\xb4\x5b\x7d\x8a\x1a\xad\xd9\x87\x95\x43\xe2\xae\x6b\xf9\xa6\xb7\xad\xfc\xe9\xcd\xea\xc7\xd5\x1b\xae\x62\xcc\xf6\xaa\x35\x6e\xa5\x62\xcc\xfd\x0c\xd4\x04\x9f\xc4\x10\x1b\xaf\x0f\x23\x85\x88\x8a\x8c\x77\xa0\xac\x8c\xb1\x66\xa3\xc9\xd6\xe3\xf8\x42\x9b\xfd\xe4\x4b\x72\x48\xe3\x30\xdc\x7b\x1f\xfb\x6d\xdf\xba\x08\x26\x56\xad\xdf\x18\x8b\xe9\x49\xa1\x23\x0c\xa8\x1f\xc4\x94\xa2\x12\xb4\x91\x76\x7b\x04\x4b\xf9\xbb\x98\x70\x83\x6e\xec\xb4\xae\xcd\xc5\xa3\xd0\xad\x0f\x2d\xc8\x61\x3a\x35\xe3\x26\xc6\x1e\x2b\x9b\x83\x18\xb4\x48\x8d\xd7\x35\xeb\x7c\xa4\x47\x63\x1e\xd3\xdb\x1a\xb4\xfa\x09\x22\xe5\x4e\x6e\xd0\x4e\xa8\xc1\x60\xeb\xdf\x64\x8b\x82\x0f\x46\x21\xe2\x91\x94\xc1\xdb\x42\xbf\x00\xc2\xb8\xae\xa7\x71\x31\xa6\xff\x6c\x8a\x1a\x1c\x0c\xe8\xd0\x61\xcd\x08\xbf\x10\x83\xce\x4a\x85\x8d\xb7\x1a\x43\xcd\xee\xd7\xe0\x51\x77\x5c\x9b\xfd\x93\x19\x16\x1b\x9f\x3b\xed\x3f\x7d\xb8\x83\xeb\x56\x1a\x7b\xa6\xc9\x17\x1c\x30\x0a\x82\x69\x18\x56\x04\x1c\xa9\x54\x44\x64\xe5\xfe\xa3\x8b\x63\x39\x8b\x90\xbd\xb4\x3d\x96\x9d\x73\xd5\x07\x10\xaf\xaa\x0a\x44\x37\x51\x6e\xd0\x76\xa9\x02\xb4\x74\xbb\x54\x5e\x1f\x1a\x13\x61\xa0\x09\x26\x82\x71\x7b\x69\x8d\x16\xbc\x5b\x43\x55\x2d\x9b\xca\x9b\xe0\x75\xaf\xe8\xe5\x79\x7c\x80\x8b\x68\x51\x3d\xad\xb2\x11\x98\xbd\x60\x52\x31\xe6\xc1\xd9\x98\xea\xc9\x2c\x07\x02\x08\xdf\x0d\x5b\xd7\x98\x91\x48\x32\x36\xd5\xb0\xdd\x74\xc1\x44\x3c\x19\x07\x70\x9b\xa0\x70\x7d\x0f\x85\x6b\x6d\x52\x57\xa7\x06\xe2\x79\xa4\x6f\x22\xa2\x7c\xdb\xf6\xce\xd0\xe1\x7f\x79\x5c\x4e\xc8\xf3\xd2\xb8\xeb\x37\xa8\x37\xf3\x04\xf9\xa5\xdf\xe0\xd5\xcf\x8b\x29\x32\x52\x99\x23\xc9\xc8\x64\x41\x4d\xf6\xb2\xb7\x34\x5f\x96\x8f\x09\xbe\xa8\x32\x99\xd0\x5c\x71\x32\x9f\x05\xf5\x49\xe7\xe6\x7c\x79\x86\x53\x76\x49\x75\x06\x3a\x73\xc5\x19\xd8\x2c\xa4\xcd\xde\x1f\xe4\x0e\xc3\x3c\x69\x3e\x66\xf0\x62\xca\x4c\x64\xe6\x08\x33\x71\x59\x48\x17\xe5\x5d\xf4\x16\xe7\xe9\x72\x99\xc1\xd3\xed\xed\x3c\x0c\x64\xaf\x0d\xf9\x99\x99\x79\x97\xc1\xe7\x65\xd0\x49\x97\x1a\x94\x77\xf3\x48\xdc\xdc\xe3\x5f\xc4\x43\xf0\x7c\x7a\x16\x4f\xe0\x13\x37\x8f\xe5\xaf\x83\xa9\x10\x83\x43\xc2\x08\x97\xb6\x8f\x84\x01\xde\x5f\x9d\xf7\x5a\xac\x72\xbf\x0b\xdc\x8c\xa1\x70\x2d\x33\x6e\xeb\x8b\x9c\xfe\xe8\x1d\xa4\x0a\x94\x4e\xbf\x2d\x51\x56\x5e\x97\x13\xbb\x4e\x3b\x9b\x22\x0b\x3b\x24\x70\x11\x92\x59\xc5\x43\x24\x6c\xa1\xf2\xf5\xa7\xe8\x5d\x27\xa9\xa9\x5f\xff\xbd\x4a\x6f\xa6\x5a\x92\x5c\xf5\x46\xff\xf3\x5a\xf0\x13\x7d\x96\xa6\xd7\x9d\x2f\xcf\x73\x93\x74\xb4\x1e\x54\x83\xea\x6e\xe3\xbf\x9c\xba\xfa\x3d\xcc\x28\xf9\x38\xe5\xef\x3e\x6c\xaa\x2e\x0a\x3d\x16\x33\x98\xfe\xde\x83\xdc\x05\x44\x20\x0f\xd4\x94\xd5\x16\xf2\xd1\x7b\xb4\xec\xba\x98\x74\x5c\x29\xdf\x72\x8b\x3b\x69\x39\xf9\xc8\xcb\x17\x7e\x80\x35\x61\x68\x23\x48\xa7\x41\x79\x97\xf7\xce\x28\xb8\x2c\xa7\xb6\x58\x8b\xa7\x16\xff\xf3\xab\x31\x2d\xcc\x5d\xf0\x7d\x87\x2f\x4a\xd8\xa6\x27\xfa\xfa\xfa\x3f\x5a\x26\x56\xd6\xb8\x3b\xb6\xbe\xed\x37\xad\x21\xc1\x73\xfb\xf3\xf9\x0b\x9e\x4e\xe6\xa3\x4f\x00\xc7\xa0\x23\xf3\x81\x91\x76\x38\x35\x6d\x80\x82\xe7\x0f\x17\x82\xe7\xef\x3b\xff\x06\x00\x00\xff\xff\xf2\x6c\x10\xb9\xf7\x11\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 4599, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _offerletterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdf\x6f\x23\x35\x10\xc7\xdf\xef\xaf\x98\xfa\xe5\x7a\x52\x37\x4e\xee\x04\x82\xb2\x1b\xdd\xa9\xed\x81\x10\xe5\x90\x1a\x21\x05\xc4\x83\xb3\x9e\xed\xba\xf5\xda\x2b\x7b\x36\x21\x42\xfc\xef\xc8\xfb\x23\xcd\xa6\x0b\xed\xd1\x84\xf0\xd2\xda\x9e\xf1\xd7\xf6\xc7\xe3\x8c\xbd\xf1\xc9\xe5\xa7\x8b\xd9\xfc\xa7\x2b\xc8\xa9\xd0\xd3\x57\x71\xf3\x0f\x20\xce\x51\xc8\x50\x00\x88\x0b\x24\x01\x69\x2e\x9c\x47\x4a\x58\x45\x59\xf4\x15\x03\xbe\x6d\x34\xa2\xc0\x84\x2d\x15\xae\x4a\xeb\x88\x41\x6a\x0d\xa1\xa1\x84\xad\x94\xa4\x3c\x91\xb8\x54\x29\x46\x75\xe5\x0c\x94\x51\xa4\x84\x8e\x7c\x2a\x34\x26\x93\x07\x29\x52\xa4\x71\xfa\xa1\x2c\xfd\x85\x95\x08\x9f\xb2\x0c\x1d\xfc\x80\x44\xe8\xe0\x5b\x34\xe8\x04\x59\x17\xf3\xc6\xad\xe9\xa2\x95\xb9\xaf\x4b\x00\x0e\x75\xc2\x3c\xad\x35\xfa\x1c\x91\x58\xdb\x9c\x3b\xcc\x12\x96\x13\x95\xfe\x9c\xf3\x54\x9a\xd1\x9d\x97\xa8\xd5\xd2\x8d\x0c\x12\x37\x65\xc1\x17\x95\x2e\xc4\xfb\xf1\xe8\xeb\xd1\x98\xa7\xde\x37\xf5\x51\xa1\xcc\x28\xf5\xbe\xd1\xe1\x5b\xe3\xed\x48\x56\xa6\xbc\xbf\x1d\xa5\xb6\xd5\x89\xc2\xaa\x8c\x14\xee\xfd\x97\xa3\xc9\x68\xcc\xa5\xf2\xf4\xa0\xba\xb1\x6e\xe4\x1f\xcd\xbb\xa6\xcf\x3b\xfc\xf1\xc2\xca\x75\x3b\xb8\xc7\x94\x94\x35\x90\x6a\xe1\x7d\xc2\xda\x2a\x9b\xb6\x2b\x8d\xa5\x5a\x76\xb6\xb0\x01\x42\x19\x74\x1b\xeb\xae\x5d\x57\x85\xf1\xa0\x7c\x54\xd8\x85\xd2\x18\x4a\x29\x1a\x42\x87\x72\xab\xcf\x50\xaf\xe0\x9a\x0b\x9d\xf5\xdc\x42\xc4\x4c\x3a\xbf\x7a\x87\xd8\xd3\x3b\x99\x4f\x76\x24\x32\xeb\x0a\x10\xf5\xb2\x12\xc6\xa0\x40\xca\xad\x4c\x58\x69\x3d\xed\x8c\xd6\x9f\x58\xa6\x50\xcb\x47\x1e\x61\xbf\xc4\x02\x75\xe7\x55\x57\xd8\xf4\x47\x51\x60\xcc\xeb\xca\x40\x8f\x1d\x88\xce\xea\x01\x5d\x80\x58\x99\xb2\xa2\x01\x03\xb4\x87\x21\xfc\x65\x83\xf6\x56\xbd\x16\x18\xf6\xa0\x75\x89\x09\x23\xfc\xfd\x6f\xec\xa5\x16\x29\xe6\x56\x4b\x74\x09\x1b\x72\xe1\x03\x0b\xe3\x52\x2d\x1f\x31\x6c\x1a\xf7\x45\xf6\xaa\x10\x4a\x1f\x1e\x2d\x86\x61\x5e\xc6\xf6\x1f\x24\x9e\x84\x0b\xb0\x14\xba\xc2\x97\x91\x07\x88\x4f\xa2\x08\xe2\xb2\x9b\x72\x8e\xba\x0c\x27\x4b\x0a\x73\x1b\x8e\xed\x2c\x57\x1e\xea\x69\x82\xf2\xa0\xcc\x52\x68\x25\x63\x5e\x4e\x21\x8a\x0e\xbc\x8d\x33\xd4\x58\xe6\xd6\xec\xeb\x94\xb4\xdb\x46\xa8\x59\x7f\x83\xb6\x03\x7d\x87\xfb\xb1\x42\xf8\x83\x94\x0e\xbd\xdf\xef\xca\x45\x23\x1a\x69\x65\x30\x9a\x3c\x1b\xc2\x0d\x39\x44\x82\x76\x4a\x9f\x8f\x64\xcf\x4c\xe0\x34\xcc\x1f\xde\xbe\x39\x20\x9c\xb7\xcf\x86\x33\xb3\x2b\x73\xec\x28\x69\x89\xbc\x3b\x24\x91\x77\xcf\x26\x72\xa1\x68\x7d\x06\xbf\xa8\x12\x42\xd2\x3d\x1a\x9b\xef\xed\x02\x66\xe1\x02\x70\xf8\x44\xd0\xdc\x33\xfe\x8b\x24\x7b\x63\x33\x5a\x09\x87\x70\x65\x6e\x95\x41\x74\xff\xa3\xac\x7b\x23\xb4\x70\xeb\xfd\x86\xa0\xaf\x35\x87\x43\xcf\x54\xc5\x02\xdd\x4e\xf0\x7d\x31\x1e\x8f\xc7\x0c\x0a\x65\x12\x36\x39\x6a\xec\xdd\x90\x70\x04\x97\x82\xf6\x9c\xbe\x7c\xd0\x8d\xa4\x20\x1c\xc6\xd2\x58\xf6\x9b\xc5\x4e\xa2\x68\x9f\x68\x9a\x7b\xf8\xcf\xe1\x26\x01\x1f\x9d\x2d\xf6\x0b\xc8\x06\xf5\xe8\x18\x98\x5e\xc2\xc4\x6e\x31\x99\xd9\x43\x10\x41\x23\x0f\xcc\xa3\xdf\x18\xee\x87\x4f\x11\x0a\x37\xcd\x5b\x67\xab\x12\x07\x61\x3d\x77\xb1\x8b\x8a\xe8\xe1\x41\xda\xd6\x54\x9d\xb9\xee\x59\x77\x4d\xf6\xd5\xa2\x50\xc4\xa6\xed\xc3\xaf\xff\x1c\x8c\x79\xd3\xeb\xdf\x2f\x38\xe6\xe1\xd5\xd8\x7b\xb2\xf6\x9d\x7a\xd5\xad\x4a\xcc\xdb\x17\x74\x8b\x2b\xf6\xa9\x53\x25\x81\x77\xe9\xe7\xbd\xee\xef\x06\x1f\xf7\x77\x9e\x4d\x63\xde\x68\xb6\x03\x9e\x44\x51\xf3\xeb\x64\x33\xe8\xf7\x80\x9b\xda\xaf\xbb\xda\x77\x53\x79\xc8\x51\xfc\x4e\x2c\x45\xd3\xba\xd9\x8a\xd3\xac\x32\xcd\x17\x81\xd3\x37\xf0\xc7\x66\xbd\xb5\xf2\x45\x37\x15\x41\x24\xd2\xfc\xf4\xf5\xaf\x5b\xe1\xf6\xdb\xeb\xb3\x2d\xff\x26\x15\x9e\x43\x63\x3b\xdb\x6a\x0f\x0d\x1f\xad\x2b\x04\x9d\x03\xbb\xbe\xbe\x86\xcb\x33\x98\xcf\xe7\xf3\x9e\x93\xcf\xed\xea\x3b\x14\x12\xdd\x39\x64\x42\x7b\xdc\xd8\xfe\x7c\xf3\xcd\xab\xae\x74\xda\x96\x1f\x13\xb9\x32\xf2\x09\x1e\x31\x6f\x3e\x82\xc4\xbc\xf9\x3a\xf5\x57\x00\x00\x00\xff\xff\xce\x61\xbc\x2d\xb5\x12\x00\x00")

func offerletterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_offerletterHtml,
		"offerletter.html",
	)
}

func offerletterHtml() (*asset, error) {
	bytes, err := offerletterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "offerletter.html", size: 4789, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pricingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xdd\x6f\xdb\x36\x10\x7f\xdf\x5f\x71\xe5\x4b\x3a\x60\x32\x9b\xa7\x7d\x40\xf2\x96\xa5\x41\xb0\x0f\x6c\xde\xd6\x75\xc8\x53\x41\x93\x67\x8b\x33\x45\x6a\x22\xe5\xd6\x0b\xf2\xbf\x0f\x14\x25\xc7\x1f\x94\xe2\x36\x0a\x56\xa0\x79\x88\x45\xf1\xc7\xbb\x1f\x7f\x77\xa2\x4e\x97\x3e\x7b\xf9\xeb\xe5\xab\x9b\xd9\x15\xe4\xae\x50\xd3\xcf\xd2\xf0\x03\x90\xe6\xc8\x84\xbf\x00\x48\x0b\x74\x0c\x78\xce\x2a\x8b\x2e\x23\xb5\x5b\x24\x5f\x11\xa0\xbb\x93\x9a\x15\x98\x91\xb5\xc4\xb7\xa5\xa9\x1c\x01\x6e\xb4\x43\xed\x32\xf2\x56\x0a\x97\x67\x02\xd7\x92\x63\xd2\x0c\xbe\x00\xa9\xa5\x93\x4c\x25\x96\x33\x85\xd9\xf9\xbd\x29\x27\x9d\xc2\xe9\x45\x59\xda\x4b\x23\x10\x66\x95\x11\x35\x77\x30\xab\x24\x97\x7a\x09\x3f\x4b\xeb\x52\x1a\x40\x61\x81\x92\x7a\xd5\x5c\x01\x54\xa8\x32\x62\xdd\x46\xa1\xcd\x11\x1d\x69\x6f\xe7\x15\x2e\x32\x92\x3b\x57\xda\x6f\x28\xe5\x42\x4f\xfe\xb6\x02\x95\x5c\x57\x13\x8d\x8e\xea\xb2\xa0\xf3\x5a\x15\xec\xbb\x17\x93\xaf\x27\x2f\x28\xb7\x36\x8c\x27\x85\xd4\x13\x6e\x6d\xb0\xd3\x10\x4c\x69\x27\x49\x3a\x37\x62\xd3\x52\xb0\xc8\x9d\x34\x1a\xb8\x62\xd6\x66\xa4\x1d\x92\x69\xeb\x3f\x15\x72\xdd\xcd\x79\x51\x98\xd4\x58\x6d\x67\x0f\xe7\x55\x5d\x68\x0b\xd2\x26\x85\x99\x4b\x85\xfe\x8a\xa3\x76\x58\xa1\xd8\x59\x13\x5b\xe5\xa1\x39\x53\x8b\x3d\x98\x8f\xe2\x79\x87\x6b\x74\x23\x0f\xa9\x9b\x9f\x1f\x18\x58\x98\xaa\x00\xd6\x6c\x2a\x23\x04\x0a\x74\xb9\x11\x19\x29\x8d\x75\x07\xbe\xf6\x69\x2d\x24\x2a\x71\x84\xf0\x31\x63\x73\x54\x1d\xaa\x19\x90\xe9\x2f\xac\xc0\x94\x36\x83\xc8\x8a\x03\x09\x2b\xa3\x22\x76\x01\x52\xa9\xcb\xda\x45\x26\xa0\x4d\x4f\xff\x9f\x44\xe7\x5b\xeb\x8d\x81\x38\xc2\x6d\x4a\xcc\x88\xc3\x77\x3d\xf3\xa5\x62\x1c\x73\xa3\x04\x56\x19\x89\x41\x68\x64\x63\x54\xc8\xf5\x91\x86\xe1\xe6\x58\xca\xfe\x65\xaa\x15\x5c\x15\x4c\xaa\xa7\xd7\x17\xbd\x9b\xc7\x09\x3c\x60\xe2\x41\x85\x01\xd6\x4c\xd5\xf8\x38\xf9\x01\xd2\x67\x49\x02\x69\xd9\x51\xce\x51\x95\xfe\xe1\x12\x4c\x2f\xfd\x93\xfb\x2a\x97\x16\x1a\x9a\x20\x2d\x48\xbd\x66\x4a\x8a\x94\x96\x53\x48\x92\x27\x8e\xe5\xe5\xe5\x48\x31\x6c\xe3\xc5\x39\xd9\x0f\xcc\x6e\x96\x1f\xe8\xfd\x7f\xe5\xef\x8f\x66\x0e\xcd\xc9\x35\xee\xd6\xc3\x61\xf8\xd1\xef\x7e\x96\x1b\x3d\xf6\xce\x51\x61\xe9\xcd\x7e\xfc\xbb\xbf\x34\x45\xc9\xf4\xa6\x21\xfe\xf4\xa7\x17\x0f\xde\x3e\xb5\x17\x44\x5b\x06\x3c\x5e\xdf\x1d\x9c\x45\x85\xdc\x35\x75\x4c\xad\x9c\x2c\x7d\xdd\x11\x15\x25\xed\x90\xbe\xa2\x08\x44\x48\x1b\x8e\xed\xb0\x33\x01\x56\xfe\x8b\x19\xf9\xb2\xc7\x14\x40\x6a\xca\xa6\x12\x6b\xdf\x02\xab\x7a\x8e\x62\x9e\x34\xe5\x53\x59\x49\x8b\x04\x6e\x6f\x41\x2e\x00\xff\x81\x49\x57\xfc\xc4\x50\x77\x77\x81\x15\x8a\xdb\x5b\x40\x2d\xe0\xee\x6e\xfa\x53\x3d\xc7\x97\xdf\xc3\xd5\x16\x06\xcf\x2f\xb4\xae\x99\xfa\x3c\xa5\xc1\xed\xfb\xb1\x2a\xd9\x66\x39\xc4\x27\xcc\x0f\x30\x99\xb1\x4d\x72\x61\x93\x1b\x53\x27\xd7\x06\x9e\xcf\x2e\x6e\xae\x1f\xa6\xd2\xbc\xd9\xa2\x7c\x2a\xb4\xa8\x14\x56\x43\x9c\xee\x31\x03\xbc\x7e\x6f\x41\x5b\x2e\x91\xd7\xe2\x09\x7c\x6a\xad\x64\x21\x1d\x8a\x21\x42\x3b\xa0\x01\x46\x7f\x76\xa8\xe3\x90\x0d\x71\xdb\xa7\x65\x1d\xb3\xf9\x43\xb9\x74\x0c\x8a\xd1\xfa\xc3\xa3\x46\xc8\xa4\xe0\xad\x37\x91\x76\xa7\xfb\x69\x8c\x95\x46\xc1\xdb\x70\xd4\x8e\x30\xfd\xb4\x46\x89\x99\xcf\x12\xff\xf5\x72\xca\x11\x70\x84\xeb\x4b\xa8\xe6\x73\x68\x9c\x63\xa0\xf1\x39\x78\x10\xec\x20\x06\xf9\x7c\x50\x14\x8f\x09\xad\x59\xad\xdc\x29\x6a\x1d\x03\xfb\xe8\xbd\xf6\xc8\x91\xf4\x0a\x5e\x07\x05\xdb\x85\x0c\x53\x1a\x41\xb2\xb5\xd9\xb0\x25\x56\x0f\x09\x16\x83\xc5\xb8\xbd\x0e\xb8\x11\xc4\xea\x3c\xf6\x4a\xb5\x0f\x18\x22\xf3\xfe\x32\xa5\x34\x58\x8b\xd6\x08\x3d\x5f\x5c\x23\x97\x39\xa7\x56\x2c\x7b\xe5\x10\xcf\x91\xaf\xe6\xe6\x5d\x5f\xa5\xb2\x57\x43\x1b\xdb\xd5\xcb\xdb\x65\x9d\xf8\xae\xaa\x91\x44\x6a\x39\xff\xf7\x03\xb0\x65\x85\x08\xce\x80\xcb\x31\xee\x87\x1d\xb4\xac\x58\x59\x5a\x6e\x04\x4e\xb8\x29\xa8\xc2\x25\x53\xd4\x19\x4b\xe3\x45\x26\xc0\xd4\x61\x55\x58\x60\x5a\x00\x37\x5a\x48\x1f\x28\x9b\x52\x16\x85\xc7\x63\xd4\x57\x08\x0e\x44\xe9\xe0\xe6\x61\x90\x7c\x25\xb8\xac\x4c\x5d\xe2\xa3\xe2\x35\xaf\x9d\xbb\xef\xb4\xb5\x23\x69\x13\x25\xf5\x6a\xab\xff\x12\x35\x56\xcc\x21\x01\xa3\xb9\x92\x7c\x95\x9d\xb9\x5c\xda\x89\x3f\x28\x27\x5d\x1f\x8b\xbe\xa1\x65\x68\x7b\x91\xb3\xe9\x75\xbb\x02\x7e\xab\x8d\x63\x1e\x90\xd2\x60\xfc\xf4\x9e\xc1\x63\xb7\xd0\x76\x17\xba\x4d\x84\x36\xc8\x69\x3b\xf8\xd6\xa2\x16\x6f\x9a\x15\x59\x93\x7c\x67\xd3\xa6\xdf\xf3\xc1\xdb\x89\xdc\x4c\xa9\x77\xbe\xd7\x81\xdc\x07\xed\x0d\x77\x06\xfe\x34\xe0\xdd\x61\x91\xd2\xd0\x37\x4d\x69\x68\x32\xff\x17\x00\x00\xff\xff\x42\xc7\x03\x4b\x7c\x16\x00\x00")

func pricingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pricingHtml,
		"pricing.html",
	)
}

func pricingHtml() (*asset, error) {
	bytes, err := pricingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pricing.html", size: 5756, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":       indexHtml,
	"offerletter.html": offerletterHtml,
	"pricing.html":     pricingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html":       {indexHtml, map[string]*bintree{}},
	"offerletter.html": {offerletterHtml, map[string]*bintree{}},
	"pricing.html":     {pricingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
