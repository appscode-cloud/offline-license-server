// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x8e\xdb\x36\x10\xbe\xf7\x29\x26\xbc\xe4\x52\x99\xd9\x5b\x1b\x50\x42\xdb\xdd\x3d\x04\x2d\xda\xa0\x1b\x14\xe8\x91\x26\xc7\x16\xb3\x14\x49\x70\x46\x4e\x8c\xa2\xef\x5e\x50\x92\x77\xbd\x96\x93\x78\x7f\x0c\x54\x07\x5b\xc3\xf9\xe5\x37\x1c\x8e\x46\xbd\xba\xfa\xe3\xf2\xc3\xdf\xef\xaf\xa1\xe5\xce\x37\xdf\xa9\xf1\x0f\x40\xb5\xa8\x6d\x79\x01\x50\x1d\xb2\x06\xd3\xea\x4c\xc8\xb5\xe8\x79\x55\xfd\x20\x40\xee\x33\x83\xee\xb0\x16\x1b\x87\x9f\x52\xcc\x2c\xc0\xc4\xc0\x18\xb8\x16\x9f\x9c\xe5\xb6\xb6\xb8\x71\x06\xab\x81\xf8\x1e\x5c\x70\xec\xb4\xaf\xc8\x68\x8f\xf5\xc5\xbd\x29\x76\xec\xb1\xf9\x39\x25\xba\x8c\x16\xe1\x37\x67\x30\x10\xc2\x0d\xe6\x0d\x66\x25\x47\xf6\x28\xea\x5d\xb8\x1d\xde\x00\x32\xfa\x5a\x10\x6f\x3d\x52\x8b\xc8\x62\x5a\x6e\x33\xae\x6a\xd1\x32\x27\x7a\x2b\xa5\xb1\x61\xf1\x91\x2c\x7a\xb7\xc9\x8b\x80\x2c\x43\xea\xe4\xb2\xf7\x9d\xfe\xe9\xcd\xe2\xc7\xc5\x1b\x69\x88\x46\x7a\xd1\xb9\xb0\x30\x44\xa3\x9d\x21\x34\x25\x77\x60\xa8\x65\xb4\xdb\x29\x04\x42\xc3\x2e\x06\x30\x5e\x13\xd5\x62\x22\x45\x33\xf9\x57\xd6\x6d\x76\xbc\x02\x87\x76\x01\xf3\x1d\xb7\x00\x7c\xb1\x63\x0f\x1b\xdb\x63\x01\x7c\x01\x83\x7b\x65\xd9\x5e\xec\x99\x5a\xc5\xdc\x81\x1e\xfc\xd7\x42\x3a\xa2\x1e\x2b\x3f\x6a\x0a\xe8\x90\xdb\x68\x6b\x91\x22\xf1\x03\x27\xfb\x11\xae\x1c\x7a\xfb\x80\x5b\x40\xd6\x4b\xf4\x3b\x89\x81\x10\xcd\xef\xba\x43\x25\x07\xe2\x40\xfa\x60\xbf\x39\xfa\x03\x7b\x00\xca\x85\xd4\xf3\xc1\x22\x4c\xa7\xa7\xfc\x8a\x19\x6f\xb2\x38\x28\xce\xb9\xbc\x4d\x58\x0b\xc6\xcf\x47\x78\xc9\x6b\x83\x6d\xf4\x16\x73\x2d\x0e\xd9\xf2\x20\x78\x69\xdd\xe6\x01\x36\xb3\x85\xa7\x80\x75\xdd\x69\xe7\xcf\x83\x16\x16\xd3\x4f\x83\xeb\x0b\xaa\x5f\xc5\x0b\x60\xa3\x7d\x8f\x8f\x07\x12\x40\xbd\xaa\x2a\x50\x69\x17\x5a\x8b\x3e\x81\xa3\xca\xea\xb0\x2e\x05\xf1\xa1\x75\x04\x43\x48\xe0\x08\x5c\xd8\x68\xef\xac\x92\xa9\x81\xaa\x7a\xf9\x8c\xbc\xcf\xd1\xf6\x86\x9f\x9e\x93\x3d\x19\x42\x8f\x86\x67\x22\xc3\xd5\x50\x38\xe0\x4a\xd5\x8d\x0e\xc5\x94\xb6\x1d\x39\x57\x02\x50\x31\x0d\x17\xca\x84\x34\xb1\xa6\xb6\xc2\xc0\x98\x53\x76\x74\xa4\x36\xca\xd3\xdc\x14\x31\xb8\xbe\x13\x83\x6b\xeb\x8a\x19\x25\x47\x73\x47\xb4\x4e\x76\x6e\x62\xd7\xf5\xc1\xf1\xf6\xab\xbe\x2f\x77\x52\x2f\xe3\xfa\xb6\x5f\xa2\x5d\x7e\x7b\xe3\xbf\xf6\x4b\xbc\xfa\xe5\xc5\x77\x3e\xb9\xff\xd6\xd6\x27\xef\x67\xd8\xfb\x46\xf7\x9e\x4f\xf2\xff\x57\x91\x3c\x5f\x08\x27\x65\x60\x8c\xe1\x1c\x49\x28\x4d\xed\x24\x18\x86\xee\x77\x06\x14\x86\x00\x4e\x02\x61\x88\xe0\x99\x18\x28\x39\xde\x1a\xb3\x1b\xe7\xc8\x8d\x7a\x9e\x6e\x55\x76\x92\x03\x32\x12\x5c\xfa\x9e\x18\x33\xbc\xbb\x3a\x4f\xf7\x32\xa3\xfd\xff\x4d\xbb\x87\x23\x0d\xca\x85\x55\x14\xcd\x9f\x7d\x80\x72\x08\x75\xb0\x6f\x41\x99\x68\xb1\x29\x67\xc3\xb0\x87\x35\x32\x04\x82\x42\x56\xb4\x25\xc6\x0e\xaa\x58\x7f\xa4\x18\x92\xe6\xb6\x7e\xfd\xcf\xa2\x7c\x1b\x5b\xcd\x7a\xd1\x3b\xfb\xef\x6b\x25\x07\xf5\xd2\xdb\x9e\x95\xbb\x53\xc0\x7f\x90\x5f\xd3\xa2\xb9\x5d\xc6\xcf\xc7\x5a\xd5\x80\xf4\x94\x15\x8e\x24\x26\x8c\xef\x54\x76\x05\xc1\xb9\x47\x71\x88\x63\x79\xde\x81\x5e\x67\x44\xe0\x08\xdc\xe2\xdc\x81\x3e\xf8\x12\xd7\x29\x51\xc1\x61\x61\x62\x27\x3d\xae\xb5\x97\x1c\x49\x1e\xab\xae\x86\x31\x77\x04\x3a\xd8\x32\x50\x8c\x35\x45\x4a\xea\x99\xe8\xbc\x66\x8e\x1d\xda\xc7\x57\x4d\x39\x06\xeb\x1c\xfb\x84\x4f\x4a\xc2\xb2\x67\xbe\x1f\x10\x26\xca\x51\x55\x86\x17\xd1\xdc\xf4\xcb\xce\xb1\x92\xe3\xfa\xe3\x62\x55\xb2\x5c\x39\x77\xa3\xc6\x3d\xb3\xdc\x22\xc3\x1c\x30\xce\x2d\xe3\xb8\xa2\xe4\x38\xd5\xfd\x17\x00\x00\xff\xff\xd0\xe5\x60\x81\xed\x0d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3565, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
