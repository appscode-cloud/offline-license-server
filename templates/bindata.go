// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
// pricing.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x72\x1b\x37\x0c\xbe\xf7\x29\x10\x5e\x72\xe9\x8a\xf1\xad\xcd\x70\x35\x6d\x6d\x1f\x32\xed\xb4\x99\x3a\xd3\x4e\x8f\x14\x09\x7b\x19\x73\x49\x0e\x81\x55\xe2\xe9\xf4\xdd\x3b\xdc\x1f\x59\xd2\x2a\xb1\x62\x4b\x3e\x58\x0b\x02\x04\xf0\x7d\x20\x09\x52\xbd\xba\xfa\xe3\xf2\xc3\x3f\xef\xaf\xa1\xe1\xd6\x2f\xbf\x53\xc3\x0f\x80\x6a\x50\xdb\xf2\x01\xa0\x5a\x64\x0d\xa6\xd1\x99\x90\x6b\xd1\xf1\x6d\xf5\x83\x00\xb9\xad\x0c\xba\xc5\x5a\xac\x1d\x7e\x4a\x31\xb3\x00\x13\x03\x63\xe0\x5a\x7c\x72\x96\x9b\xda\xe2\xda\x19\xac\x7a\xe1\x7b\x70\xc1\xb1\xd3\xbe\x22\xa3\x3d\xd6\x17\x8f\xae\xd8\xb1\xc7\xe5\xcf\x29\xd1\x65\xb4\x08\xbf\x39\x83\x81\x10\x6e\x30\xaf\x31\x2b\x39\xa8\x07\x53\xef\xc2\x7d\xff\x05\x90\xd1\xd7\x82\xf8\xc1\x23\x35\x88\x2c\xc6\xe1\x26\xe3\x6d\x2d\x1a\xe6\x44\x6f\xa5\x34\x36\x2c\x3e\x92\x45\xef\xd6\x79\x11\x90\x65\x48\xad\x5c\x75\xbe\xd5\x3f\xbd\x59\xfc\xb8\x78\x23\x0d\xd1\x20\x2f\x5a\x17\x16\x86\x68\xf0\xd3\xa7\xa6\xe4\x44\x86\x5a\x45\xfb\x30\xa6\x40\x68\xd8\xc5\x00\xc6\x6b\xa2\x5a\x8c\xa2\x58\x8e\xf1\x95\x75\xeb\x49\x57\xe8\xd0\x2e\x60\xde\x68\x0b\xc1\x17\x93\xba\x07\x26\xbe\x0c\xbc\xb9\xd8\x9a\x76\x1b\x73\x0b\xba\x8f\x55\x0b\xe9\x88\x3a\xac\xfc\x30\x41\x40\x8b\xdc\x44\x5b\x8b\x14\x89\xb7\x62\xed\x66\x73\xeb\xd0\xdb\x1d\x6d\x21\x54\xaf\xd0\x4f\x16\xbd\x20\x96\xbf\xeb\x16\x95\xec\x85\x3d\xeb\x3d\x6c\x39\xfa\x3d\x7f\x00\xca\x85\xd4\xf1\xb8\x32\xca\x7f\x31\xcd\xe8\x15\x02\xf8\x21\x61\x2d\x18\x3f\xb3\x80\xe4\xb5\xc1\x26\x7a\x8b\xb9\x16\x9b\x05\xb1\x71\x25\xad\x5b\xef\xa0\x99\x0d\x3c\x07\xde\xdf\x31\xdf\xc3\x75\xab\x9d\x7f\x21\xc8\xbd\x41\x18\x41\x63\x71\x2d\x66\xca\x1d\x16\x66\xda\x81\x95\x2f\x4c\xdd\xa5\x69\xa6\x5e\x6b\xdf\xe1\x5c\xf1\x14\x9b\x00\xea\x55\x55\x81\x4a\x53\x6a\x0d\xfa\x04\x8e\x2a\xab\xc3\x5d\x59\xb3\x1f\x1a\x47\xd0\xa7\x04\x8e\xc0\x85\xb5\xf6\xce\x2a\x99\x96\x50\x55\xa7\x2f\xcb\xfb\x1c\x6d\x67\xf8\xf9\x35\xd9\xb2\x21\xf4\x68\x78\x66\xd2\xef\xde\xa2\x01\x57\x36\xcb\x10\x50\x8c\x65\x9b\xc4\xf9\x24\x00\x15\x53\xbf\xe7\x47\xa6\x89\x35\x35\x15\x06\xc6\x9c\xb2\x23\x3c\x38\x07\xe0\xa6\x98\xc1\xf5\xc6\x0c\xae\xad\x2b\x6e\x0e\x05\x90\x43\x84\xa3\x83\x9b\xd8\xb6\x5d\x70\xfc\xf0\xd5\xd8\x97\x93\xd5\x69\x42\xdf\x77\x2b\xb4\xab\xa7\x81\xff\xda\xad\xf0\xea\x97\x93\x23\x1f\xc3\x3f\x05\x7d\x8c\x7e\x06\xec\x6b\xdd\x79\x3e\x0e\xfe\x5f\xc5\xf4\x2c\x0c\x0c\x49\x1c\x43\xc2\x90\xc3\x19\x78\x28\xbd\xe8\x38\x1a\xfa\xae\x75\x0e\x16\xfa\x14\x8e\x21\xa1\xcf\xe0\x65\x1c\x28\x39\x9c\x1a\xb3\x13\xe7\xc0\x89\x7a\x9e\x96\x55\x80\xe4\x80\x8c\x04\x97\xbe\x23\xc6\x0c\xef\xae\x4e\xd3\xa2\xcd\xe0\xef\x84\x5d\x1a\x0e\xb4\x14\x17\x6e\xe3\x2c\x8f\x3f\xbb\x00\xa5\x84\x3a\xd8\xb7\xfb\x29\x9a\x68\x71\x56\x88\x65\xa9\xbc\x61\x0f\x77\xc8\x10\x08\x8a\x58\xd1\x03\x31\xb6\x50\xc5\xfa\x23\xc5\x90\x34\x37\xf5\xeb\x7f\x17\xe5\x7a\x6a\x35\xeb\x45\xe7\xec\x7f\xaf\x95\x3c\xe0\x6f\x1f\x46\x7a\x59\xdd\x8e\x21\x7e\xa7\xb6\xa6\x41\x73\xbf\x8a\x9f\x0f\xb5\xa9\xed\x0a\x71\xa4\xa9\x1e\x9b\x29\xd3\x56\xe0\xdc\xe1\xac\x22\xe5\xef\x1d\xe8\xbb\x8c\x08\x1c\x81\x9b\x39\x93\x4a\xef\x5d\x94\x75\x4a\x54\x38\x5a\x98\xd8\x4a\x8f\x77\xda\x4b\x8e\x24\xe7\x97\x0d\x80\x25\x63\x6e\x09\x74\xb0\xe5\xbe\x3f\xec\x27\x52\x52\xcf\xcb\x35\xdb\x2f\x87\x16\xec\xb7\xef\x98\xb2\xa0\xee\x72\xec\x12\x3e\xab\x08\xab\x8e\xf9\xf1\xfe\x3e\x4a\x8e\xaa\xf2\xb6\x10\xcb\x9b\x6e\xd5\x3a\x56\x72\x18\xff\xb6\x5c\x95\x2c\xa7\xcd\xe6\x25\xf0\xa8\x2c\x27\x88\x99\x0e\x17\x25\x87\xd7\x84\x92\xc3\xa3\xeb\xff\x00\x00\x00\xff\xff\x83\x93\x8a\x72\x8c\x0d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3468, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pricingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x4b\x6f\x24\x35\x10\xbe\xf3\x2b\x6a\x7d\xc9\x22\xd1\xed\x8d\xc4\x01\x90\x7b\x20\x64\xa3\x88\x87\x60\x10\x2b\xa1\x9c\x56\x1e\xbb\x32\x6d\xe2\xb6\x8d\x5d\x3d\xbb\x43\x94\xff\x8e\xdc\x8f\xc9\xbc\xf2\x4e\xd0\x6a\x2f\xc9\xd8\xf5\xfa\xea\x6b\xbb\x5c\x25\x5e\xbd\xfd\xfd\xf8\xdd\xd9\xf4\x04\x6a\x6a\xec\xe4\x0b\xd1\xff\x03\x10\x35\x4a\x9d\x7f\x00\x88\x06\x49\x82\xaa\x65\x4c\x48\x15\x6b\xe9\xbc\xf8\x86\x01\x5f\x17\x3a\xd9\x60\xc5\x16\x06\x3f\x04\x1f\x89\x81\xf2\x8e\xd0\x51\xc5\x3e\x18\x4d\x75\xa5\x71\x61\x14\x16\xdd\xe2\x2b\x30\xce\x90\x91\xb6\x48\x4a\x5a\xac\x0e\xaf\x5d\x91\x21\x8b\x93\xa3\x10\xd2\xb1\xd7\x08\xd3\xe8\x75\xab\x08\xa6\xd1\x28\xe3\xe6\xf0\xab\x49\x24\x78\xaf\xd4\x1b\x58\xe3\x2e\xba\x5f\x00\x11\x6d\xc5\x12\x2d\x2d\xa6\x1a\x91\xd8\xb0\x5d\x47\x3c\xaf\x58\x4d\x14\xd2\x77\x9c\x2b\xed\xca\xbf\x93\x46\x6b\x16\xb1\x74\x48\xdc\x85\x86\xcf\x5a\xdb\xc8\x1f\xde\x94\xdf\x96\x6f\xb8\x4a\xa9\x5f\x97\x8d\x71\xa5\x4a\xa9\xf7\xd3\x01\x14\x7c\xa4\x44\xcc\xbc\x5e\x0e\x10\x12\x2a\x32\xde\x81\xb2\x32\xa5\x8a\x0d\x4b\x36\x19\xe2\x0b\x6d\x16\xa3\x2c\x93\x22\x8d\xc3\xb8\x92\x66\x9a\x0f\x47\x71\x97\x18\xbb\x2b\xfd\xfa\x70\xcd\xf8\xdc\xc7\x06\x64\x17\xb1\x62\x0c\x1a\xa4\xda\xeb\x8a\x05\x9f\x68\x2d\xc6\x26\x8a\x73\x83\x56\x6f\x48\x33\x91\x72\x86\x76\xd4\xe8\x16\x6c\xf2\x9b\x6c\x50\xf0\x6e\xb1\xa5\xbd\x95\x53\xf4\x76\xcb\x1f\x80\x30\x2e\xb4\xb4\xb5\x09\xc3\x39\xc9\x7f\xd9\x8e\x6c\xf0\xd8\x19\xee\x4a\x69\x19\xb0\x62\x84\x1f\xf7\xc8\x82\x95\x0a\x6b\x6f\x35\xc6\x8a\x6d\x8b\xf9\x16\x78\xae\xcd\x62\x83\x9b\x7e\xe3\xa9\x6c\xfd\xe5\xe3\x05\x9c\x34\xd2\xd8\x97\xe1\x0c\xb3\xeb\xc7\x91\x76\x83\xe9\xad\xac\x01\x2c\xa4\x6d\xf1\xe1\x74\x02\x88\x57\x45\x01\x22\x8c\xd0\x6a\xb4\x01\x4c\x2a\xb4\x74\xf3\x7c\xf4\xdf\xd5\x26\x41\x07\x09\x4c\x02\xe3\x16\xd2\x1a\x2d\x78\x98\x40\x51\xbc\xc0\x77\x39\x3e\x7e\xe2\xf7\x18\xf8\x57\x8a\x6d\x92\xbd\x7e\x22\xb7\xb8\xfc\xbf\xce\xdc\xcf\x7e\x06\x5d\xd5\x78\x9e\x14\xfb\x02\xf4\xc9\x65\x39\xad\xbd\x7b\xae\x0c\xd1\x62\xc8\xee\x3e\xbd\x2c\x8f\x7d\x13\xa4\x5b\x76\x40\x5f\xa6\x82\xa8\x3e\xc2\xe7\x56\x78\x87\x67\xf2\xf1\x9c\xad\xe9\x24\xb4\xa8\x28\x57\xab\xa6\xb5\x64\x42\x7e\x8f\x77\x92\x16\xa3\x56\x7e\x69\xfb\xe0\x6c\xa0\x78\xb5\x1c\xcd\x21\x99\x7f\xb1\x62\x5f\xef\x71\x03\x20\x7c\xe8\x5a\x87\xa1\xd2\x26\x92\xa9\x2e\x82\x5c\xce\x19\x5c\x5e\x82\x39\x07\xfc\x07\xca\xb1\x0b\xd8\x10\x5f\x5d\xf5\x18\x50\x5f\x5e\x02\x3a\x0d\x57\x57\x93\x3f\xb3\x1c\xa6\x72\x59\x1c\xa5\xe2\xcc\xb7\xc5\xa9\x87\xd7\xd3\xa3\xb3\xd3\x2f\x05\xef\x03\xdd\x03\xc3\x45\x3b\x43\x3d\xbb\x19\xc4\x86\x7c\x1f\x8a\x5f\xda\x19\xbe\xfd\xf1\xa9\x30\xfa\x5c\xd1\x11\xc6\x10\x4d\xc2\x5b\x08\x59\x57\xba\x99\x96\x93\x95\x16\xbc\x3e\x72\xae\x95\xf6\x11\xac\xdc\x81\x67\x8f\xd6\x2d\x0c\x3d\x08\x91\xe0\xbd\x9f\x9d\xb3\xbb\xe7\xf5\x7d\x86\x6b\x76\x9f\x5b\xb3\x71\x15\x55\x8d\xea\x62\xe6\x3f\xee\xbb\x2d\x1b\xf5\xd7\xa7\xb1\xd6\xae\x4c\x46\x92\x29\xb6\xc8\xf8\xae\x83\x9f\x40\xce\x23\x22\x90\x07\xaa\x71\xd7\xbf\xdc\xea\xf1\x65\x08\x49\x79\x8d\xa5\xf2\x0d\xb7\x38\x97\x96\x93\x4f\x7c\xb7\x78\x01\x4c\x08\x63\x93\x40\x3a\x9d\x07\x16\x6d\x32\xf9\x49\x70\xb9\xa3\xba\xcb\xfb\xbe\x62\x73\x03\xf3\xb7\x10\x9f\x2b\xcd\x3c\xfa\x36\xe0\xa3\xbe\xc1\xac\x25\xba\x1e\x3d\x86\x95\x49\x45\x1e\x8b\x56\xbc\xce\xd1\x61\x94\x84\x0c\xbc\x53\xd6\xa8\x8b\xea\x80\x6a\x93\xca\x3c\x3b\x94\xe3\xec\xc0\xdf\xf3\xd0\x8f\x19\xec\x60\x72\x3a\x58\xc0\x1f\xad\x27\x99\x15\x04\xef\x9d\xdf\xdd\xfb\x3d\x05\xf6\xd0\x21\x8e\xc0\xfb\xb6\xf5\x7e\xa8\xbf\x4f\xe8\xf4\xfb\xce\xa2\xea\x0e\xd2\xc1\xa4\xeb\xc5\x1f\x9c\xc2\xd6\x86\xe0\x39\xe0\x6a\x98\xbb\x16\xe6\x1b\xa9\xc6\xcb\x2a\x78\x3f\x10\x0a\xde\x4f\xcf\xff\x05\x00\x00\xff\xff\x43\x27\xb1\xfc\x55\x0f\x00\x00")

func pricingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pricingHtml,
		"pricing.html",
	)
}

func pricingHtml() (*asset, error) {
	bytes, err := pricingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pricing.html", size: 3925, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":   indexHtml,
	"pricing.html": pricingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html":   {indexHtml, map[string]*bintree{}},
	"pricing.html": {pricingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
