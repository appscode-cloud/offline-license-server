// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x6f\xdb\x36\x10\x7f\xdf\xa7\xb8\xf2\xa5\x2f\x93\xd9\xbc\x6d\x05\x25\x6c\x4b\xf2\x50\x6c\xd8\x8a\xa5\xd8\xb0\x47\x9a\x3c\x5b\x6c\x28\x92\xe0\x9d\xdc\x1a\xc3\xbe\xfb\x40\x49\x4e\x1c\xcb\x6d\x9d\x34\x06\xaa\x07\x5b\xc7\xfb\xcb\xdf\xf1\x78\x3a\xf5\xe2\xea\x8f\xcb\x77\xff\xbc\xbd\x86\x96\x3b\xdf\x7c\xa7\xc6\x3f\x00\xd5\xa2\xb6\xe5\x05\x40\x75\xc8\x1a\x4c\xab\x33\x21\xd7\xa2\xe7\x55\xf5\x83\x00\xb9\xcf\x0c\xba\xc3\x5a\x6c\x1c\x7e\x48\x31\xb3\x00\x13\x03\x63\xe0\x5a\x7c\x70\x96\xdb\xda\xe2\xc6\x19\xac\x06\xe2\x7b\x70\xc1\xb1\xd3\xbe\x22\xa3\x3d\xd6\x17\xf7\xa6\xd8\xb1\xc7\xe6\xe7\x94\xe8\x32\x5a\x84\xdf\x9c\xc1\x40\x08\x37\x98\x37\x98\x95\x1c\xd9\xa3\xa8\x77\xe1\x76\x78\x03\xc8\xe8\x6b\x41\xbc\xf5\x48\x2d\x22\x8b\x69\xb9\xcd\xb8\xaa\x45\xcb\x9c\xe8\xb5\x94\xc6\x86\xc5\x7b\xb2\xe8\xdd\x26\x2f\x02\xb2\x0c\xa9\x93\xcb\xde\x77\xfa\xa7\x57\x8b\x1f\x17\xaf\xa4\x21\x1a\xe9\x45\xe7\xc2\xc2\x10\x8d\x76\x86\xd0\x94\xdc\x81\xa1\x96\xd1\x6e\xa7\x10\x08\x0d\xbb\x18\xc0\x78\x4d\x54\x8b\x89\x14\xcd\xe4\x5f\x59\xb7\xd9\xf1\x0a\x1c\xda\x05\xcc\x77\xdc\x02\xf0\xc5\x8e\x3d\x6c\x6c\x8f\x05\xf0\x09\x0c\xee\x95\x65\x7b\xb1\x67\x6a\x15\x73\x07\x7a\xf0\x5f\x0b\xe9\x88\x7a\xac\xfc\xa8\x29\xa0\x43\x6e\xa3\xad\x45\x8a\xc4\x0f\x9c\xec\x47\xb8\x72\xe8\xed\x03\x6e\x01\x59\x2f\xd1\xef\x24\x06\x42\x34\xbf\xeb\x0e\x95\x1c\x88\x03\xe9\x83\xfd\xe6\xe8\x0f\xec\x01\x28\x17\x52\xcf\x07\x8b\x30\x9d\x9e\xf2\x2b\x66\xbc\xc9\xe2\xa0\x38\xe7\xf2\x36\x61\x2d\x18\x3f\x1e\xe1\x25\xaf\x0d\xb6\xd1\x5b\xcc\xb5\x38\x64\xcb\x83\xe0\xa5\x75\x9b\x07\xd8\xcc\x16\x9e\x02\xd6\xdf\x31\xdf\xc2\x75\xa7\x9d\x3f\x0f\x64\x58\x4c\x3f\x0d\xb3\x4f\xa8\x7e\x16\x34\x80\x8d\xf6\x3d\x3e\x1e\x4d\x00\xf5\xa2\xaa\x40\xa5\x5d\x68\x2d\xfa\x04\x8e\x2a\xab\xc3\xba\x54\xc5\xbb\xd6\x11\x0c\x21\x81\x23\x70\x61\xa3\xbd\xb3\x4a\xa6\x06\xaa\xea\xf9\xd3\xf2\x36\x47\xdb\x1b\x7e\x7a\x4e\xf6\x64\x08\x3d\x1a\x9e\x89\x0c\xf7\x43\xe1\x80\x2b\xa5\x37\x3a\x14\x53\xda\x76\xe4\x5c\x09\x40\xc5\x34\xdc\x2a\x13\xd2\xc4\x9a\xda\x0a\x03\x63\x4e\xd9\xd1\x91\x02\x29\x4f\x73\x53\xc4\xe0\xfa\x4e\x0c\xae\xad\x2b\x66\x94\x1c\xcd\x1d\xd1\x3a\xd9\xb9\x89\x5d\xd7\x07\xc7\xdb\xcf\xfa\xbe\xdc\x49\x3d\x8f\xeb\xdb\x7e\x89\x76\xf9\xe5\x8d\xff\xda\x2f\xf1\xea\x97\x67\xdf\xf9\xe4\xfe\x4b\x5b\x9f\xbc\x9f\x61\xef\x1b\xdd\x7b\x3e\xc9\xff\x5f\x45\xf2\x7c\x21\x9c\x94\x81\x31\x86\x73\x24\xa1\x74\xb6\x93\x60\x18\x5a\xe0\x19\x50\x18\x02\x38\x09\x84\x21\x82\xaf\xc4\x40\xc9\xf1\xd6\x98\xdd\x38\x47\x6e\xd4\xf3\xb4\xac\xb2\x93\x1c\x90\x91\xe0\xd2\xf7\xc4\x98\xe1\xcd\xd5\x79\xba\x97\x19\xed\x7f\x33\x3d\x1f\x8e\x34\x28\x17\x56\x51\x34\x7f\xf6\x01\xca\x21\xd4\xc1\xbe\x06\x65\xa2\xc5\xa6\x9c\x0d\xc3\x1e\xd6\xc8\x10\x08\x0a\x59\xd1\x96\x18\x3b\xa8\x62\xfd\x9e\x62\x48\x9a\xdb\xfa\xe5\xbf\x8b\xf2\x81\x6c\x35\xeb\x45\xef\xec\x7f\x2f\x95\x1c\xd4\x4b\x6f\xfb\xaa\xdc\x9d\x02\xfe\x83\xfc\x9a\x16\xcd\xed\x32\x7e\x3c\xd6\xaa\x06\xa4\xa7\xac\x70\x24\x31\x61\x7c\xa7\xb2\x2b\x08\xce\x3d\x8a\x43\x1c\xcb\xf3\x06\xf4\x3a\x23\x02\x47\xe0\x16\xe7\x0e\xf4\xc1\xe7\xb8\x4e\x89\x0a\x0e\x0b\x13\x3b\xe9\x71\xad\xbd\xe4\x48\xf2\x58\x75\x35\x8c\xb9\x23\xd0\xc1\x96\xa9\x62\xac\x29\x52\x52\xcf\x44\xe7\x35\x73\xec\xd0\x3e\xbe\x6a\xca\x31\x58\xe7\xd8\x27\x7c\x52\x12\x96\x3d\xf3\xfd\x94\x30\x51\x8e\xaa\x32\xc1\x88\xe6\xa6\x5f\x76\x8e\x95\x1c\xd7\x1f\x17\xab\x92\xe5\xca\xb9\x9b\x37\xee\x99\xe5\x16\x19\x86\x81\x71\x78\x19\x67\x16\x25\xc7\xd1\xee\xff\x00\x00\x00\xff\xff\x26\x6f\xd6\x50\xf2\x0d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3570, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
