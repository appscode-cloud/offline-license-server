// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcd\x6e\xdc\x36\x10\xbe\xf7\x29\x26\xbc\xe4\x52\x89\xc9\xad\x0d\x28\xa1\xad\xed\x43\xd0\xa2\x0d\xea\x5c\x7a\xa4\xc8\xd9\x15\x63\x8a\x24\x38\xa3\x4d\x16\x45\xdf\xbd\xa0\xa4\xb5\xd7\xab\x4d\x13\x3b\x36\xd0\x3d\xd8\x1a\x7e\xf3\xc7\x6f\x38\x83\x51\x2f\x2e\xff\xb8\x78\xff\xd7\xbb\x2b\xe8\x79\xf0\xed\x77\x6a\xfe\x07\xa0\x7a\xd4\xb6\x7c\x00\xa8\x01\x59\x83\xe9\x75\x26\xe4\x46\x8c\xbc\xa9\x7e\x10\x20\x8f\xc1\xa0\x07\x6c\xc4\xce\xe1\xc7\x14\x33\x0b\x30\x31\x30\x06\x6e\xc4\x47\x67\xb9\x6f\x2c\xee\x9c\xc1\x6a\x12\xbe\x07\x17\x1c\x3b\xed\x2b\x32\xda\x63\xf3\xfa\xce\x15\x3b\xf6\xd8\xfe\x9c\x12\x5d\x44\x8b\xf0\x9b\x33\x18\x08\xe1\x1a\xf3\x0e\xb3\x92\x33\x3c\xab\x7a\x17\x6e\xa6\x2f\x80\x8c\xbe\x11\xc4\x7b\x8f\xd4\x23\xb2\x58\x8e\xfb\x8c\x9b\x46\xf4\xcc\x89\xde\x48\x69\x6c\xa8\x3f\x90\x45\xef\x76\xb9\x0e\xc8\x32\xa4\x41\x76\xa3\x1f\xf4\x4f\xaf\xea\x1f\xeb\x57\xd2\x10\xcd\x72\x3d\xb8\x50\x1b\xa2\xd9\xcf\x94\x9a\x92\x07\x32\x54\x17\xed\x7e\x49\x81\xd0\xb0\x8b\x01\x8c\xd7\x44\x8d\x58\x44\xd1\x2e\xf1\x95\x75\xbb\x03\x56\xe8\xd0\x2e\x60\xbe\x45\x0b\xc1\xaf\x0f\xf0\x74\xb1\x23\x08\xe0\x33\x1c\xdc\x19\xcb\xfe\xf5\x91\xab\x4d\xcc\x03\xe8\x29\x7e\x23\xa4\x23\x1a\xb1\xf2\xb3\xa5\x80\x01\xb9\x8f\xb6\x11\x29\x12\xdf\x0b\x72\x9c\xe1\xc6\xa1\xb7\xf7\xd0\x42\xb2\xee\xd0\x1f\x34\x26\x41\xb4\xbf\xeb\x01\x95\x9c\x84\x13\xed\x93\xfb\xe6\xe8\x4f\xfc\x01\x28\x17\xd2\xc8\x27\x87\xb0\xbc\x9e\xf2\x57\xac\xb0\xc5\xe3\x64\xb8\x46\x79\x9f\xb0\x11\x8c\x9f\xce\x60\xc9\x6b\x83\x7d\xf4\x16\x73\x23\x4e\x61\x79\x92\xbc\xb4\x6e\x77\x8f\x9b\xd5\xc1\x63\xc8\xba\x1a\xb4\xf3\xcf\xc3\x16\x16\xd7\x8f\xa3\xeb\x33\xa6\xff\xc9\x17\xc0\x4e\xfb\x11\x1f\x4e\x24\x80\x7a\x51\x55\xa0\xd2\x21\xb5\x1e\x7d\x02\x47\x95\xd5\x61\x5b\x1a\xe2\x7d\xef\x08\xa6\x94\xc0\x11\xb8\xb0\xd3\xde\x59\x25\x53\x0b\x55\xf5\xf4\x15\x79\x97\xa3\x1d\x0d\x3f\xbe\x26\x47\x3a\x84\x1e\x0d\xaf\x54\xa6\xd1\x50\x10\x70\xa5\xeb\xe6\x80\x62\x29\xdb\x41\x5c\x1b\x01\xa8\x98\xa6\x81\xb2\x30\x7d\x33\x76\x68\xbb\xca\xc4\x61\x18\x83\xe3\xfd\xba\x24\xe5\xd7\xfe\x3a\x76\x78\xf9\x0b\x5c\x1c\xd4\xe0\xca\xba\xe2\x46\xc9\xd9\xdd\x19\xab\xaf\x0f\x8e\x81\x31\xa7\xec\xe8\x4c\x67\x1e\x47\xbf\xba\xd5\x7b\x9a\xf0\xc4\x9a\xfa\x2f\x5e\xfd\xba\x68\x3d\xf5\xcd\xe7\xd0\x5f\xbc\xf8\x1c\xfb\x1b\xef\xad\xe4\xfc\x52\x56\xaf\xec\x4c\x17\x3d\xcf\x84\x2a\xf5\xcb\x01\x19\x09\x2e\xfc\x48\x8c\x19\xde\x5e\x3e\xcf\xc4\x32\xb3\xff\xff\xcd\x88\x87\x33\x43\xc9\x85\x4d\x14\xed\x9f\x63\x80\xf2\xf6\x74\xb0\x6f\x40\x99\x68\xb1\x2d\xfd\x60\xd8\xc3\x16\x19\x02\x41\x11\x2b\xda\x13\xe3\x00\x55\x6c\x3e\x50\x0c\x49\x73\xdf\xbc\xfc\xbb\x2e\xfb\x90\xd5\xac\xeb\xd1\xd9\x7f\x5e\x2a\x39\x99\x97\x79\xf6\x4d\xb5\xfb\x1a\xf2\xef\xd5\xd7\xf4\x68\x6e\xba\xf8\xe9\xdc\x78\x9a\x98\x5e\xaa\xc2\x91\xc4\xc2\xf1\xad\xc9\xa1\x15\x38\x8f\x28\x4e\x79\x2c\xbf\xb7\xa0\xb7\x19\x11\x38\x02\xf7\xb8\x0e\xa0\x4f\xb6\x2f\x9d\x12\x15\x1e\x6a\x13\x07\xe9\x71\xab\xbd\xe4\x48\xf2\x5c\x6b\xb5\x8c\x79\x20\xd0\xc1\x96\x25\x72\xee\x29\x52\x52\xaf\x54\xd7\x3d\x73\xee\xd1\x3e\xbc\x6b\xca\x33\xd8\xe6\x38\x26\x7c\x54\x11\xba\x91\xf9\x6e\x29\x5c\x24\x47\x55\x59\x58\x45\x7b\x3d\x76\x83\x63\x25\xe7\xf3\x87\xe5\xaa\x64\x59\xf3\x6e\xd7\xcb\x3b\xb0\x4c\x91\x69\xf7\x9b\x77\xd5\x79\x45\x55\x72\xde\xe4\xff\x0d\x00\x00\xff\xff\xe5\x56\x15\xc1\xe1\x0b\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3041, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
