// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// index.html
// pricing.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x72\x1b\x37\x0c\xbe\xf7\x29\x10\x5e\x72\xe9\x8a\xf1\xad\xcd\x70\x35\x6d\x6d\x1f\x32\xed\xb4\x99\x3a\xd3\x4e\x8f\x14\x09\x7b\x19\x73\x49\x0e\x81\x55\xe2\xe9\xf4\xdd\x3b\xdc\x1f\x59\xd2\x2a\xb1\x62\x4b\x3e\x58\x0b\x02\x04\xf0\x7d\x20\x09\x52\xbd\xba\xfa\xe3\xf2\xc3\x3f\xef\xaf\xa1\xe1\xd6\x2f\xbf\x53\xc3\x0f\x80\x6a\x50\xdb\xf2\x01\xa0\x5a\x64\x0d\xa6\xd1\x99\x90\x6b\xd1\xf1\x6d\xf5\x83\x00\xb9\xad\x0c\xba\xc5\x5a\xac\x1d\x7e\x4a\x31\xb3\x00\x13\x03\x63\xe0\x5a\x7c\x72\x96\x9b\xda\xe2\xda\x19\xac\x7a\xe1\x7b\x70\xc1\xb1\xd3\xbe\x22\xa3\x3d\xd6\x17\x8f\xae\xd8\xb1\xc7\xe5\xcf\x29\xd1\x65\xb4\x08\xbf\x39\x83\x81\x10\x6e\x30\xaf\x31\x2b\x39\xa8\x07\x53\xef\xc2\x7d\xff\x05\x90\xd1\xd7\x82\xf8\xc1\x23\x35\x88\x2c\xc6\xe1\x26\xe3\x6d\x2d\x1a\xe6\x44\x6f\xa5\x34\x36\x2c\x3e\x92\x45\xef\xd6\x79\x11\x90\x65\x48\xad\x5c\x75\xbe\xd5\x3f\xbd\x59\xfc\xb8\x78\x23\x0d\xd1\x20\x2f\x5a\x17\x16\x86\x68\xf0\xd3\xa7\xa6\xe4\x44\x86\x5a\x45\xfb\x30\xa6\x40\x68\xd8\xc5\x00\xc6\x6b\xa2\x5a\x8c\xa2\x58\x8e\xf1\x95\x75\xeb\x49\x57\xe8\xd0\x2e\x60\xde\x68\x0b\xc1\x17\x93\xba\x07\x26\xbe\x0c\xbc\xb9\xd8\x9a\x76\x1b\x73\x0b\xba\x8f\x55\x0b\xe9\x88\x3a\xac\xfc\x30\x41\x40\x8b\xdc\x44\x5b\x8b\x14\x89\xb7\x62\xed\x66\x73\xeb\xd0\xdb\x1d\x6d\x21\x54\xaf\xd0\x4f\x16\xbd\x20\x96\xbf\xeb\x16\x95\xec\x85\x3d\xeb\x3d\x6c\x39\xfa\x3d\x7f\x00\xca\x85\xd4\xf1\xb8\x32\xca\x7f\x31\xcd\xe8\x15\x02\xf8\x21\x61\x2d\x18\x3f\xb3\x80\xe4\xb5\xc1\x26\x7a\x8b\xb9\x16\x9b\x05\xb1\x71\x25\xad\x5b\xef\xa0\x99\x0d\x3c\x07\xde\xdf\x31\xdf\xc3\x75\xab\x9d\x7f\x21\xc8\xbd\x41\x18\x41\x63\x71\x2d\x66\xca\x1d\x16\x66\xda\x81\x95\x2f\x4c\xdd\xa5\x69\xa6\x5e\x6b\xdf\xe1\x5c\xf1\x14\x9b\x00\xea\x55\x55\x81\x4a\x53\x6a\x0d\xfa\x04\x8e\x2a\xab\xc3\x5d\x59\xb3\x1f\x1a\x47\xd0\xa7\x04\x8e\xc0\x85\xb5\xf6\xce\x2a\x99\x96\x50\x55\xa7\x2f\xcb\xfb\x1c\x6d\x67\xf8\xf9\x35\xd9\xb2\x21\xf4\x68\x78\x66\xd2\xef\xde\xa2\x01\x57\x36\xcb\x10\x50\x8c\x65\x9b\xc4\xf9\x24\x00\x15\x53\xbf\xe7\x47\xa6\x89\x35\x35\x15\x06\xc6\x9c\xb2\x23\x3c\x38\x07\xe0\xa6\x98\xc1\xf5\xc6\x0c\xae\xad\x2b\x6e\x0e\x05\x90\x43\x84\xa3\x83\x9b\xd8\xb6\x5d\x70\xfc\xf0\xd5\xd8\x97\x93\xd5\x69\x42\xdf\x77\x2b\xb4\xab\xa7\x81\xff\xda\xad\xf0\xea\x97\x93\x23\x1f\xc3\x3f\x05\x7d\x8c\x7e\x06\xec\x6b\xdd\x79\x3e\x0e\xfe\x5f\xc5\xf4\x2c\x0c\x0c\x49\x1c\x43\xc2\x90\xc3\x19\x78\x28\xbd\xe8\x38\x1a\xfa\xae\x75\x0e\x16\xfa\x14\x8e\x21\xa1\xcf\xe0\x65\x1c\x28\x39\x9c\x1a\xb3\x13\xe7\xc0\x89\x7a\x9e\x96\x55\x80\xe4\x80\x8c\x04\x97\xbe\x23\xc6\x0c\xef\xae\x4e\xd3\xa2\xcd\xe0\xef\x84\x5d\x1a\x0e\xb4\x14\x17\x6e\xe3\x2c\x8f\x3f\xbb\x00\xa5\x84\x3a\xd8\xb7\xfb\x29\x9a\x68\x71\x56\x88\x65\xa9\xbc\x61\x0f\x77\xc8\x10\x08\x8a\x58\xd1\x03\x31\xb6\x50\xc5\xfa\x23\xc5\x90\x34\x37\xf5\xeb\x7f\x17\xe5\x7a\x6a\x35\xeb\x45\xe7\xec\x7f\xaf\x95\x3c\xe0\x6f\x1f\x46\x7a\x59\xdd\x8e\x21\x7e\xa7\xb6\xa6\x41\x73\xbf\x8a\x9f\x0f\xb5\xa9\xed\x0a\x71\xa4\xa9\x1e\x9b\x29\xd3\x56\xe0\xdc\xe1\xac\x22\xe5\xef\x1d\xe8\xbb\x8c\x08\x1c\x81\x9b\x39\x93\x4a\xef\x5d\x94\x75\x4a\x54\x38\x5a\x98\xd8\x4a\x8f\x77\xda\x4b\x8e\x24\xe7\x97\x0d\x80\x25\x63\x6e\x09\x74\xb0\xe5\xbe\x3f\xec\x27\x52\x52\xcf\xcb\x35\xdb\x2f\x87\x16\xec\xb7\xef\x98\xb2\xa0\xee\x72\xec\x12\x3e\xab\x08\xab\x8e\xf9\xf1\xfe\x3e\x4a\x8e\xaa\xf2\xb6\x10\xcb\x9b\x6e\xd5\x3a\x56\x72\x18\xff\xb6\x5c\x95\x2c\xa7\xcd\xe6\x25\xf0\xa8\x2c\x27\x88\x99\x0e\x17\x25\x87\xd7\x84\x92\xc3\xa3\xeb\xff\x00\x00\x00\xff\xff\x83\x93\x8a\x72\x8c\x0d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3468, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pricingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdd\x6f\xdb\x36\x10\x7f\xdf\x5f\x71\xe5\xf3\x64\x36\x6f\xdb\x40\x19\xeb\xdc\x62\xd8\x07\x36\x03\x2d\x30\xf4\x69\xa0\xc8\xb3\xc5\x85\x22\x39\xf2\xe4\xd6\x08\xf2\xbf\x0f\x14\xa5\xc4\xb6\x9c\x7e\xa4\xc9\x10\xf4\x25\xd1\xe9\x77\x9f\x3f\x9e\x8e\x67\xf1\xec\xe5\x9f\xab\x37\x6f\xd7\xaf\xa0\xa5\xce\x2e\xbf\x11\xe5\x1f\x80\x68\x51\xea\xfc\x00\x20\x3a\x24\x09\xaa\x95\x31\x21\xd5\xac\xa7\x4d\xf5\x1d\x03\x7e\x08\x3a\xd9\x61\xcd\x76\x06\xdf\x05\x1f\x89\x81\xf2\x8e\xd0\x51\xcd\xde\x19\x4d\x6d\xad\x71\x67\x14\x56\x83\xf0\x2d\x18\x67\xc8\x48\x5b\x25\x25\x2d\xd6\x17\xb7\xae\xc8\x90\xc5\xe5\x8b\x10\xd2\xca\x6b\x84\x75\xf4\xba\x57\x04\xeb\x68\x94\x71\x5b\xf8\xdd\x24\x12\xbc\x28\x15\x03\x6b\xdc\xe5\xf0\x04\x10\xd1\xd6\x2c\xd1\xde\x62\x6a\x11\x89\x8d\xaf\xdb\x88\x9b\x9a\xb5\x44\x21\xfd\xc0\xb9\xd2\x6e\xf1\x4f\xd2\x68\xcd\x2e\x2e\x1c\x12\x77\xa1\xe3\x4d\x6f\x3b\xf9\xe3\xf3\xc5\xf7\x8b\xe7\x5c\xa5\x54\xe4\x45\x67\xdc\x42\xa5\x54\xfc\x0c\x09\x0a\x3e\x51\x22\x1a\xaf\xf7\x63\x0a\x09\x15\x19\xef\x40\x59\x99\x52\xcd\x46\x91\x2d\xc7\xf8\x42\x9b\xdd\x84\x65\x52\xa4\x71\x18\x6f\xd0\x4c\xf3\xc5\x04\x0f\x85\xb1\x8f\x95\xdf\x5e\x1c\x18\x6f\x7c\xec\x40\x0e\x11\x6b\xc6\xff\xe6\xa1\xa8\x32\xe8\x90\x5a\xaf\x6b\x16\x7c\xa2\x83\x68\xc7\xf9\x6c\x0c\x5a\x7d\x84\x66\x4a\x65\x83\x76\xd2\x18\x04\xb6\xfc\x43\x76\x28\xf8\x20\x9c\x68\x9f\x54\x17\xbd\x3d\xf1\x07\x20\x8c\x0b\x3d\x9d\xbc\x84\xb1\x63\xf2\x5f\x36\xc3\x46\x8f\x83\xe1\x1c\xa5\x7d\xc0\x9a\x11\xbe\x3f\x83\x05\x2b\x15\xb6\xde\x6a\x8c\x35\x3b\x85\xf9\x49\xf2\x5c\x9b\xdd\x11\x37\xe5\xc5\x97\xb2\xf5\x97\x8f\x97\xf0\xaa\x93\xc6\x3e\x0e\x67\x98\x5d\xdf\x8f\xb4\x3b\x4c\x3f\xc8\x1a\xc0\x4e\xda\x1e\x3f\x9f\x4e\x00\xf1\xac\xaa\x40\x84\x29\xb5\x16\x6d\x00\x93\x2a\x2d\xdd\x36\x7f\x04\x6f\x5a\x93\x60\x48\x09\x4c\x02\xe3\x76\xd2\x1a\x2d\x78\x58\x42\x55\x3d\xc2\xb9\xac\x56\x5f\x78\x1e\x23\xff\x4a\xb1\x63\xb2\x0f\x3b\xf2\x84\xcb\xff\xab\xe7\x7e\xf5\x0d\x0c\xf3\xe3\x61\x4a\x2c\xa3\xe8\xc9\x55\xb9\x6e\xbd\x7b\xa8\x0a\xd1\x62\xc8\xee\x9e\x5e\x95\x2b\xdf\x05\xe9\xf6\x43\xa2\x8f\x33\x41\x54\x89\xf0\xb5\x0d\xde\xf1\xc2\xbc\x3f\x67\x07\x3a\x09\x2d\x2a\x9a\xa9\x0c\x17\x7e\x46\xc0\xe4\xdb\xb5\x04\x64\x23\xad\x93\x38\x37\x02\x10\x3e\x0c\x6b\xc2\x38\x4b\x13\xc9\xd4\x56\x41\xee\xb7\x0c\xae\xae\xc0\x6c\x00\xff\x85\xc5\x74\xe3\x1f\xc1\xd7\xd7\x25\x22\xea\xab\x2b\x40\xa7\xe1\xfa\x7a\xf9\x3a\xe3\xb0\x7e\xf1\xf6\x67\xc1\x8b\xe3\x4f\x88\x79\xd9\x37\xa8\x9b\xbb\x83\x1e\xe1\xe7\xa2\xfe\xd6\x37\xf8\xf2\xa7\x8f\x84\x15\xbc\x18\xce\xc8\x3d\x73\x3d\x3c\x40\x1f\x7c\xca\xb1\x1e\xf5\x8a\x6a\x51\x5d\x36\xfe\xfd\xb9\xa3\x3d\x1a\x10\x3e\x4d\xc3\xe0\xc6\x64\x62\x92\x62\x8f\x8c\xcf\x1d\xfc\x02\x72\x1b\x11\x81\x3c\x50\x8b\x73\xff\xf2\x64\x1d\x95\x21\x24\xe5\x35\x2e\x94\xef\xb8\xc5\xad\xb4\x9c\x7c\xe2\xf3\xaf\x0b\x60\x49\x18\xbb\x04\xd2\xe9\xbc\x5b\x6b\x93\xc9\x4f\x82\xcb\x99\xea\x9c\xf7\x73\x5f\xc3\x1d\xcc\x7f\x80\xf8\x7c\x71\x6f\xa3\xef\x03\xde\xeb\x0c\x9a\x9e\xe8\x76\x4b\x1e\x25\x93\xaa\xbc\xc1\xb3\xe5\xeb\xbe\xe9\x0c\x09\x5e\xde\x7f\x5e\xae\x82\xe7\x2d\xf8\x66\xdf\xbe\x05\x73\x27\xaa\xa9\x49\x05\x2f\x3b\xbb\xe0\xe5\x07\xce\x7f\x01\x00\x00\xff\xff\xfe\x7d\x5e\xfa\xf8\x0c\x00\x00")

func pricingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pricingHtml,
		"pricing.html",
	)
}

func pricingHtml() (*asset, error) {
	bytes, err := pricingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pricing.html", size: 3320, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":   indexHtml,
	"pricing.html": pricingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html":   {indexHtml, map[string]*bintree{}},
	"pricing.html": {pricingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
