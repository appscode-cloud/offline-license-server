// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// eula.html
// index.html
// offerletter.html
// pricing.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _eulaHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x72\xdb\x36\x10\xbe\xf7\x29\x36\xe8\xb5\x14\xf2\x73\x69\x3b\xa4\xa6\x8a\xe3\xf1\xa1\x9e\xd6\x1d\xbb\xe9\xe4\xd4\x59\x01\x2b\x11\x0d\xfe\x0a\x80\x72\xf4\xf6\x1d\x10\x64\x2c\xc9\x74\xe2\xb8\x8a\xd3\xce\x84\x17\x61\xb1\xdf\x62\x97\xfb\x2d\xb4\x00\xeb\x27\xaf\x7e\x3d\xb9\x7a\x73\x71\x0a\x6d\x32\x7a\xfe\x4d\x5d\x7e\x00\xea\x96\x50\xe6\x01\x40\x6d\x28\x21\x88\x16\x43\xa4\xd4\xb0\x2e\xad\xaa\xef\x19\xf0\x5d\xa5\x45\x43\x0d\xdb\x28\xba\xf6\x2e\x24\x06\xc2\xd9\x44\x36\x35\xec\x5a\xc9\xd4\x36\x92\x36\x4a\x50\xd5\x0b\xdf\x81\xb2\x2a\x29\xd4\x55\x14\xa8\xa9\x79\x76\xb3\x54\x52\x49\xd3\x7c\xe1\x7d\x3c\x71\x92\xe0\xd2\xad\xd2\x35\x06\x82\x73\x25\xc8\x46\x82\xc5\x3a\x10\x19\xb2\xa9\xe6\x05\x5a\xcc\xb4\xb2\x6f\x21\x90\x6e\x58\x6c\x5d\x48\xa2\x4b\xa0\x84\xb3\x0c\xd2\xd6\x53\xc3\x94\xc1\x35\x71\x6f\xd7\x0c\xda\x40\xab\x86\xb5\x29\xf9\xf8\x23\xe7\x42\xda\x19\x7a\x1f\x85\x93\x34\x13\xce\xf0\x1e\x19\xb9\x0f\x4e\x76\x22\x45\x3e\x2a\x79\x5e\x2e\xf2\x15\x6e\xf2\xa0\x7a\xf1\xfc\xdd\x8b\xe7\xb3\xbc\xe0\x4e\x00\xfd\x08\x86\x30\xd2\x56\x53\x6c\x89\x12\x1b\xa6\x6f\x3b\xfe\x2b\x4a\xd2\x6a\x13\x66\x96\x12\xb7\xde\xf0\x65\xa7\x0d\xfe\xf4\x74\xf6\xc3\xec\x29\x17\x31\x16\x79\x66\x94\x9d\x89\x18\xcb\x3a\x7d\x9e\x6a\x3e\x32\x53\x2f\x9d\xdc\x0e\x21\x44\x12\x49\x39\x0b\x42\x63\x8c\x0d\x1b\xc4\x21\x40\x80\x5a\xaa\xcd\xa8\xcb\xdc\xa0\xb2\x14\xde\x6b\x0f\xf5\xba\x33\x36\x82\x8a\x95\x71\x4b\xa5\x29\x8f\x04\xd9\x44\x81\xe4\x8e\xcd\x94\x55\x86\xb6\xa8\x57\x7b\xb0\x5c\x4c\xcf\x46\x5c\x4f\x1c\xbb\x21\xf9\xf4\xf7\xf3\x05\x9c\x91\xa5\x80\xc9\x85\x9a\xb7\xcf\x0e\x4c\x57\x2e\x18\xc0\xfe\x75\x1a\xc6\xff\xe4\xd4\x69\x64\x60\x28\xb5\x4e\x36\xcc\xbb\x98\x0e\x9c\xed\xc7\xb5\x52\xa4\xe5\x2d\x44\x26\x0d\x97\xa4\x47\x54\x2f\xb0\xf9\x89\x33\x1e\xed\x16\xce\x69\x8d\x1a\x7e\x41\x43\x35\xef\x55\x13\xf6\x07\x19\x0d\x4e\x4f\x78\x01\xa8\x95\xf5\x5d\x9a\x50\xc0\xb0\x69\x44\xf1\xc9\x26\x21\x83\x83\x7e\x8d\x69\x44\xa9\xf1\x44\xef\xee\xd0\x7b\x8d\x82\x5a\xa7\x25\x85\x86\x4d\x41\xf8\xc4\xbb\x71\xa9\x36\xb7\x92\x5a\x26\x8f\x9d\xea\x3f\x68\x19\x55\x7a\x84\x3c\x4b\x67\x50\xd9\x2f\x96\x66\x80\x0d\xea\x8e\xfe\x1d\x07\x00\xf5\x93\xaa\x82\xda\x8f\x11\xb7\xa4\x7d\xde\x73\x12\xed\x3a\x6f\xe8\xab\x56\x45\x20\x83\x4a\x83\x8a\xa0\xec\x06\xb5\x92\x35\xf7\x73\xa8\xaa\x47\x22\xb4\xec\x9d\x85\x94\x81\x62\xfc\xfc\xb4\x62\x71\xf4\x95\xd7\x43\x0f\xc7\xe2\xf5\xb7\xce\x25\xec\x7b\xcb\xb7\x9f\x9f\xcd\xbf\x47\x67\x5f\xf9\x3c\xf4\x70\x2c\x3e\x2f\xca\xe9\xe6\x48\xdd\x6d\x07\x17\x49\x93\xb8\xdd\x8c\x07\x60\xd1\x82\xca\x3d\xbb\x44\xc0\x06\xce\x47\x71\xda\x10\xa0\x76\x3e\x57\xc4\xfc\xe7\x6e\x49\xaf\x5e\xc2\x69\x3e\x88\xf8\xa0\x22\xd5\x7c\xd0\x7c\xc4\xf0\x32\x61\x6c\x1f\x60\x97\x1d\xbe\xc6\x4e\xa7\x07\xda\xf6\x27\x97\x4f\x37\x7d\xed\xb6\xb8\xa6\x70\x6f\xcb\x9a\x97\xdc\x4e\xf2\x73\x47\x75\x3e\x42\x83\xbf\xc0\x6d\x3e\xaa\xc3\x15\x05\x73\x84\x3e\xf0\xa0\x42\x2b\x21\x54\x89\x82\x79\x5f\x6d\xbb\x73\x1f\xa1\x62\xfc\x2b\x40\x6b\x3b\x9c\x8e\xab\x3c\x8b\x1e\x70\xd7\x62\xf7\xe3\x7d\x74\xe6\x71\xbb\xfe\x80\xab\x8b\xc5\x9b\xb3\x07\x39\xfa\x8f\x96\xc9\x65\xe7\xf3\x95\x11\x2e\x34\xda\x2f\x53\x25\xb1\x44\x50\x79\x8d\x76\xac\x92\xbd\xb9\x7b\x12\xb7\xc4\xa8\xc4\x07\x98\x7b\x99\xf5\xc7\xa9\x91\xb5\x9b\x4c\xf0\xf8\x9c\x39\x2d\x8f\x54\x8c\x1a\x93\xb2\xdd\xdd\x3b\x05\x32\x71\x3d\xe4\xff\x50\x94\xb9\x05\xaf\x83\xeb\x3c\x4d\xd6\xe7\x7d\xab\x6c\xd9\xa5\x74\x73\xd7\x1e\x24\x15\x2b\xad\xec\x5b\x36\xa6\x2e\x76\x4b\xa3\x12\x9b\x0f\x77\x5b\x82\x93\xbc\x24\x8a\x54\xf3\x62\xf1\x69\xaf\xb6\x3f\x95\x5b\xcb\xde\x4d\x7c\x1f\xb4\x27\xee\x08\x39\xdd\x62\x64\xa3\xe6\xe5\xfb\x41\xcd\xcb\x37\x9f\x7f\x02\x00\x00\xff\xff\x97\x31\x1f\xba\x0b\x12\x00\x00")

func eulaHtmlBytes() ([]byte, error) {
	return bindataRead(
		_eulaHtml,
		"eula.html",
	)
}

func eulaHtml() (*asset, error) {
	bytes, err := eulaHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "eula.html", size: 4619, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x93\x1b\x27\x10\xbe\xe7\x57\xb4\x27\x07\x5f\x32\xc2\x8f\x4b\xe2\x62\x54\x71\xd6\x7b\x70\x25\x95\xb8\x62\x97\x53\x39\x22\x68\x69\xf0\x32\x40\xa0\x47\xf6\xd6\xd6\xfe\xf7\x14\xf3\x90\xf5\x40\xab\x95\x56\xd2\xc1\x1e\x86\x8f\xe6\xeb\xfe\xba\x7b\x07\xf8\xb3\x77\x7f\x5d\x7d\xfa\xf7\xc3\x35\xd4\xd4\x98\xe9\x0f\xbc\xff\x0f\x80\xd7\x28\x54\x7a\x00\xe0\x0d\x92\x00\x59\x8b\x10\x91\xaa\xa2\xa5\x79\xf9\x73\x01\x6c\x7d\xd2\x8a\x06\xab\x62\xa9\xf1\xab\x77\x81\x0a\x90\xce\x12\x5a\xaa\x8a\xaf\x5a\x51\x5d\x29\x5c\x6a\x89\x65\x37\xf8\x09\xb4\xd5\xa4\x85\x29\xa3\x14\x06\xab\x97\xdf\x4d\x91\x26\x83\xd3\xb7\xde\xc7\x2b\xa7\x10\xfe\xd0\x12\x6d\x44\xf8\x88\x61\x89\x81\xb3\x7e\xba\x87\x1a\x6d\x6f\x20\xa0\xa9\x8a\x58\xbb\x40\xb2\x25\xd0\xd2\xd9\x02\xe8\xd6\x63\x55\xe8\x46\x2c\x90\x79\xbb\x28\xa0\x0e\x38\xaf\x8a\x9a\xc8\xc7\x37\x8c\x49\x65\x27\xc2\xfb\x28\x9d\xc2\x89\x74\x0d\xeb\x90\x91\xf9\xe0\x54\x2b\x29\xb2\x71\x92\x25\x73\x91\xcd\xc5\x32\x3d\x94\xaf\x5f\x7d\x7b\xfd\x6a\x92\x0c\xae\x11\xe8\x9e\x60\xa0\x41\xb7\x06\x63\x8d\x48\xc5\xf0\x7a\x77\xe3\x2f\x51\xa1\xd1\xcb\x30\xb1\x48\xcc\xfa\x86\xcd\x5a\xd3\x88\x5f\x5f\x4c\x7e\x99\xbc\x60\x32\xc6\x7e\x3c\x69\xb4\x9d\xc8\x18\x7b\x3b\x5d\x6c\x38\x1b\xd5\xe0\x33\xa7\x6e\x07\x0a\x11\x25\x69\x67\x41\x1a\x11\x63\x55\x0c\xc3\x81\x20\x00\x57\x7a\x39\xce\x25\x3d\x84\xb6\x18\x56\xb3\xdb\xf3\xa6\x6d\x6c\x04\x1d\xcb\xc6\xcd\xb4\xc1\xf4\x24\xd1\x12\x06\x54\x6b\x6b\x72\xab\x12\xb4\x16\x66\xbe\x01\x4b\x09\xf4\x72\xc4\x75\xc2\x15\xfb\x85\xad\x5f\x6e\x2d\x15\x81\xb4\x34\x38\xae\x6f\x30\x46\xb1\xe8\x38\x69\x3b\x77\x5b\x1b\x6d\x72\x1a\xb0\x65\x8a\xd3\x0e\x10\x56\x5b\xeb\x18\x5b\x6d\x17\xe0\x83\x93\x18\x23\x48\x61\x61\x86\x20\x5a\x72\x8d\x20\x54\x30\x77\xc6\xb8\xaf\x09\x42\x35\x42\x24\xf4\x11\x78\xa4\xe0\xec\x62\xca\xc5\x96\xb8\x0b\x4d\x75\x3b\xeb\xf2\x69\x95\x3f\x6e\x3e\x37\xda\x62\x69\xfa\x1d\xcb\xd8\x39\xfb\xa3\xf0\xba\x0c\x38\xc7\x80\x56\x62\x31\xad\x31\x20\x67\x62\xca\xd9\x60\x7b\xb2\xed\x1b\x53\x7a\xb9\x15\x1e\x36\xc4\x67\xeb\xf5\xdc\x85\x06\x44\x97\x04\x55\xc1\x92\x87\xab\xdd\x0b\x68\x90\x6a\xa7\xaa\xc2\xbb\x48\x0f\x06\x70\xae\xd1\xa8\x4c\xe4\xb8\x11\x33\x34\x23\xaa\x1b\x14\xd3\x3f\x45\x83\x9c\x75\x83\xcc\x8a\xad\x04\x0c\xce\x64\xec\x02\x70\x6d\x7d\x4b\x43\x0f\x49\xff\x16\xe3\xaa\x6e\x62\xac\x69\xc2\x6f\x54\x80\x37\x42\x62\xed\x8c\xc2\x50\x15\xab\xd6\x71\x20\x62\xfb\x5e\x9e\xea\xf6\x3f\x2e\xdc\xc0\x75\x23\xb4\x39\x93\xf3\x99\x09\x18\x02\x82\x69\x9b\x22\x0b\xd8\x88\x52\x16\xd1\x47\xee\x01\x13\x9b\xe1\xcc\x42\x96\xc2\xb4\x98\x9f\x7c\x6c\xf4\x01\xf8\xb3\xb2\x04\xee\x47\xca\x35\x1a\x9f\xca\x59\x09\xbb\x48\x4d\xe9\x53\xad\x23\x74\x34\x41\x47\xd0\x76\x29\x8c\x56\x9c\xf9\x29\x94\xe5\x65\xa5\xfc\xd0\x37\xfe\xa7\xeb\xb8\x86\x8b\x68\x50\xee\x56\xd9\x00\xec\x67\x41\xa7\x62\xec\x37\x2f\x06\xa9\xc7\x61\x7e\x21\x00\x77\xbe\x6b\xf8\x83\x22\x37\xed\x0c\xd5\xac\xec\xba\xb4\x0f\x3a\x55\xf9\xdd\x1d\xe8\x39\xe0\x7f\x30\x19\xfc\x82\x1c\xea\xfe\xbe\xe7\x80\xea\xee\x0e\xd0\x2a\xb8\xbf\xdf\xb7\x25\xc0\xef\xed\x0c\xdf\xfd\x06\xd7\xab\xf5\x70\xad\x74\xa2\xb1\x8f\x24\xeb\x59\x1e\xe7\x84\x74\x4d\xd3\x5a\x4d\xb7\x0f\xf9\xb0\x06\x3a\xc5\x85\xab\x71\xf9\x79\x3d\x88\x24\x62\x7d\x48\x85\x5d\xd0\x51\x1e\x7c\x4c\xcb\x2f\xa6\x41\x4f\xee\x61\x09\x76\x30\x27\xf0\xbf\x90\x00\x29\x3b\x96\xa2\x35\xf4\x98\x52\xd8\x05\x1e\x9d\x4a\x9f\x93\x89\x8b\x16\x44\x4f\xf2\x70\x4d\xec\xe0\x4e\xf4\xe5\x82\xc2\xa4\x8f\x92\xc7\xe8\xb2\x83\x3b\xda\x95\xee\xf3\xe7\x92\xaa\x74\x14\x0f\x8b\xb2\x0d\x3b\xcd\x91\x0b\x49\xb2\x74\xb7\x62\x81\xe1\x90\x22\x39\xd8\x51\x7e\x7c\xee\x0d\x5c\x4c\x8f\x91\xe0\xc3\x72\x64\x50\x27\x79\x71\x21\x31\xd2\x09\xd3\x19\x3c\x24\x46\x0e\x76\x94\x1b\x57\xbd\x81\xf1\xf0\x73\x1e\xf2\xa2\x55\x9a\xdc\xc1\x4c\xca\xc1\x8e\x22\xff\xb6\x37\x70\x5e\xf2\x5e\xd8\xf4\x22\x9d\xec\x0f\xf0\xdf\x83\x3c\xca\x85\x0f\x2b\x1b\x4f\xf2\x82\xb3\x7e\xcf\xec\xe7\xe7\x9e\xcf\xee\xcb\x9f\x85\x52\xc7\x0a\x16\x09\x23\x5c\x99\x36\x12\x06\x78\xff\xee\xbc\x67\x42\xd9\xdb\xbd\xc0\xb1\x10\x32\x67\x92\xec\x15\x43\xfa\xfd\xdd\x5a\x48\x9d\x44\x58\xf5\x26\x47\x39\x1d\xfb\xb3\xc2\x4d\xd3\x9f\x05\x49\x06\x16\x48\x60\x23\xa4\x61\x19\x6f\x23\x61\x03\xa5\xab\xbe\x44\x67\xbd\xa0\xba\x7a\x7e\x37\x69\x90\x84\x12\x24\x26\xad\x56\xf7\xcf\x39\xdb\x63\x33\xe7\x9e\x3f\x9f\xce\x8f\x15\x69\x23\x1f\x64\x8d\xf2\x66\xe6\xbe\xed\x3b\xf7\xac\x2b\x4a\x2e\x8e\xfa\xad\x96\x8d\xb5\x49\xa1\xc5\xac\x82\xe9\xf7\x1e\xc4\x22\x20\x02\x39\xa0\x3a\x1f\xed\x9d\xdb\x99\x8d\xfb\x3e\x83\x0b\x61\x18\xb9\xc8\xf2\xa7\x5d\x80\x29\x61\x68\x22\x08\xab\x40\x3a\xdb\xf7\xfb\xc8\x99\xc8\x4b\x9b\xad\xc5\x7d\xc9\x7f\x7a\x35\xa6\xc4\x5c\x04\xd7\x7a\x7c\x92\x60\xb3\x96\xe8\xfb\x8d\xe1\x30\xd2\xb1\x34\xda\xde\x14\xd3\x8f\xed\xac\xd1\xc4\x59\xff\xfe\x74\xfe\x9c\xa5\x4f\x98\x8d\x5b\xc3\x4d\xd0\xc6\x70\x6d\x90\x3a\x9c\x1c\x1b\x20\x67\xfd\x5d\x27\x67\xfd\x9d\xf4\xff\x01\x00\x00\xff\xff\x96\xb2\xfe\x5d\xab\x16\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 5803, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _offerletterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x4f\x23\x37\x10\x7f\xbf\x4f\x31\xf8\xe5\x40\x62\xe3\x04\xd4\xaa\xa5\xbb\xd1\x9d\x80\x6b\x55\x95\x5e\x25\xa2\x4a\xb4\xea\x83\xb3\x9e\xcd\x1a\xbc\xf6\xca\x9e\x0d\x87\xaa\x7e\xf7\xca\xfb\x27\x64\xc3\xb6\x70\x25\x69\xee\x05\x6c\xcf\xf8\xe7\x99\x9f\xc7\x99\x99\x8d\x0f\x2e\x3e\x9e\xcf\x6e\x7e\xb9\x84\x9c\x0a\x3d\x7d\x13\x37\xff\x00\xe2\x1c\x85\x0c\x03\x80\xb8\x40\x12\x90\xe6\xc2\x79\xa4\x84\x55\x94\x45\xdf\x30\xe0\xeb\x42\x23\x0a\x4c\xd8\x52\xe1\x7d\x69\x1d\x31\x48\xad\x21\x34\x94\xb0\x7b\x25\x29\x4f\x24\x2e\x55\x8a\x51\x3d\x39\x06\x65\x14\x29\xa1\x23\x9f\x0a\x8d\xc9\xe4\x11\x8a\x14\x69\x9c\xbe\x2f\x4b\x7f\x6e\x25\xc2\xc7\x2c\x43\x07\x3f\x21\x11\x3a\xf8\x1e\x0d\x3a\x41\xd6\xc5\xbc\x51\x6b\xb6\x68\x65\xee\xc0\xa1\x4e\x98\xcf\xad\xa3\xb4\x22\x50\xa9\x35\x0c\xe8\xa1\xc4\x84\xa9\x42\x2c\x90\x97\x66\xc1\x20\x77\x98\x25\x2c\x27\x2a\xfd\x19\xe7\xa9\x34\x23\x51\x96\x3e\xb5\x12\x47\xa9\x2d\x78\xad\xe9\x79\xe9\xac\xac\x52\xf2\xbc\x13\xf2\x00\xe7\x79\x26\x96\x61\x10\x9d\x9e\x7c\x3a\x3d\x19\x05\xc0\x35\x03\xea\x11\xb4\x66\xd0\x83\x46\x9f\x23\x12\x6b\x97\x9f\x1e\x7c\xeb\x25\x6a\xb5\x74\x23\x83\xc4\x4d\x59\xf0\x79\xa5\x0b\xf1\x6e\x3c\xfa\x76\x34\xe6\xa9\xf7\xcd\x7c\x54\x28\x33\x4a\xbd\x6f\x70\xf8\xba\xc3\x7d\xc8\xca\x94\x77\x8b\xda\x89\x7a\x5f\x14\x68\x35\x52\xb8\x77\x5f\x8f\x26\xa3\x31\x97\xca\xd3\x23\xea\x4a\xba\x82\x7f\x62\x77\x7d\xfd\xbc\xbb\xff\x78\x6e\xe5\x43\x7b\xb8\xc7\x94\x94\x35\x90\x6a\xe1\x7d\xc2\xda\x69\x4b\x05\x40\x2c\xd5\xb2\x93\x85\x08\x10\xca\xa0\x5b\x49\x37\xe5\xba\x2a\x8c\x07\xe5\xa3\xc2\xce\x95\xc6\x30\x4a\xd1\x10\x3a\x94\x6b\x7b\x86\x76\x05\xd5\x5c\xe8\xac\xa7\x16\x42\x76\xd2\xe9\xd5\x21\xc2\x9e\x0f\xa5\x7c\xb2\x01\x91\x59\x57\x80\xa8\xdd\x4a\x18\x83\x02\x29\xb7\x32\x61\xa5\xf5\xb4\x71\x5a\xdf\xb0\x4c\xa1\x96\x4f\x34\xc2\x7d\x89\x39\xea\x4e\xab\x9e\xb0\xe9\xcf\xa2\xc0\x98\xd7\x93\x81\x1d\x1b\x24\x3a\xab\x07\x70\x01\x62\x65\xca\x8a\x06\x04\xd0\xbe\xc6\xf0\x97\x0d\xca\x5b\xf4\x1a\x60\x58\xa3\x79\x3d\x84\x9f\xfe\x41\x5e\x6a\x91\x62\x6e\xb5\x44\x97\xb0\x21\x15\x3e\xe0\x18\x97\x6a\xf9\x84\xc3\x66\x71\x5b\xcc\x5e\x16\x42\xe9\xdd\x53\x8b\xe1\x98\xd7\x71\xfb\x2f\x10\xcf\x92\x0b\xb0\x14\xba\xc2\xd7\x31\x0f\x10\x1f\x44\x11\xc4\x65\x67\x72\x8e\xba\x0c\x2f\x4b\x0a\xb3\x08\xcf\x76\x96\x2b\x0f\xb5\x99\xa0\x3c\x28\xb3\x14\x5a\xc9\x98\x97\x53\x88\xa2\x1d\x5f\xe3\x0c\x35\x96\xb9\x35\xdb\x7a\x25\xed\xb5\x11\x6a\xd6\xbf\xa0\xf5\x40\xdf\xe0\x7d\x5f\x21\xfc\x5e\x4a\x87\xde\x6f\xd7\x73\xd1\x80\x46\x5a\x19\x8c\x26\x2f\x26\xe1\x9a\x1c\x22\x41\x6b\xd2\xe7\x53\xb2\x65\x4e\xe0\x30\xd8\x0f\x27\x47\x3b\x24\xe7\xe4\xc5\xe4\xcc\xec\xbd\xd9\x77\x94\xb4\x8c\x9c\xee\x92\x91\xd3\x17\x33\x72\xae\xe8\xe1\x18\x7e\x53\x25\x84\xa4\xbb\x37\x6e\x7e\xb4\x73\x98\x85\x02\x60\xf7\x89\xa0\xa9\x33\xfe\x8f\x24\x7b\x6d\x33\xba\x17\x0e\xe1\xd2\x2c\x94\x41\x74\x5f\x50\xd6\xbd\x16\x5a\xb8\x87\xed\x86\xa0\xaf\x31\x87\x43\xcf\x54\xc5\x1c\xdd\x46\xf0\x7d\x35\x1e\x8f\xc7\x0c\x0a\x65\x12\x36\xd9\x6b\xec\x5d\x93\x70\x04\x17\x82\xb6\x9c\xbe\x7c\xc0\x8d\xa4\x20\x1c\xa6\xa5\x91\x6c\x37\x8b\x1d\x44\xd1\x36\xa9\x69\xea\xf0\x5f\x43\x25\x01\x1f\x9c\x2d\xb6\x4b\x90\x0d\xe8\xd1\x3e\x68\x7a\x0d\x27\x76\x8d\x93\x99\xdd\x05\x23\x68\xe4\x8e\xf9\xe8\x2f\x86\xfa\xf0\x39\x86\x42\xa5\xb9\x70\xb6\x2a\x71\x90\xac\x97\x3a\x3b\xaf\x88\x1e\x1b\xd2\x76\xa6\xea\xcc\x75\xc7\xba\x32\xd9\x57\xf3\x42\x11\x9b\xb6\x8d\x5f\xbf\x1d\x8c\x79\xb3\xeb\xbf\x3b\x1c\xf3\xd0\x35\xf6\x5a\xd6\xbe\x52\x6f\xba\x36\x89\x79\xdb\x41\xb7\x74\xc5\x3e\x75\xaa\x24\xf0\x2e\xfd\xbc\xee\xfe\x76\xb0\xb9\xbf\xf5\x6c\x1a\xf3\x06\xb3\x3d\xf0\x20\x8a\x9a\x5f\x27\x9b\x41\x7f\x07\x5c\xd7\x7a\x5d\x69\xdf\x99\xf2\x98\xa3\xf8\xad\x58\x8a\x66\x75\x75\x15\x87\x59\x65\x9a\x2f\x02\x87\x47\xf0\xe7\xca\xdf\x1a\xf9\xbc\x33\x45\x10\x89\x34\x3f\x7c\xfb\xfb\x5a\xb8\xfd\xf1\xf6\x78\x4d\xbf\x49\x85\x67\xd0\xc8\x8e\xd7\xd6\xc3\xc2\x07\xeb\x0a\x41\x67\xc0\xae\xae\xae\xe0\xe2\x18\x6e\x6e\x6e\x6e\x7a\x4a\x3e\xb7\xf7\x3f\xa0\x90\xe8\xce\x20\x13\xda\xe3\x4a\xf6\xd7\xd1\x77\x6f\xba\xd1\x61\x3b\x7e\xca\xc8\xa5\x91\xcf\xf0\x11\xf3\xe6\x23\x48\xcc\x9b\xcf\x63\x7f\x07\x00\x00\xff\xff\xf1\xb0\xd0\xbe\x36\x13\x00\x00")

func offerletterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_offerletterHtml,
		"offerletter.html",
	)
}

func offerletterHtml() (*asset, error) {
	bytes, err := offerletterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "offerletter.html", size: 4918, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pricingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4d\x8f\xdb\x36\x10\xbd\xf7\x57\x4c\x78\x49\x0a\x54\x66\x36\xb9\xb4\x85\xe4\x76\xbb\x09\x82\x7e\xa0\x75\xdb\x34\x45\x4e\x01\x4d\x8e\x2d\xd6\x14\xc9\x92\x94\x13\x77\xb1\xff\xbd\xa0\x28\x39\xfe\x90\xb5\x4e\x56\x8b\x06\xe8\x1e\xd6\xa2\xf8\x38\xf3\xf8\x66\x44\x8d\x26\x7f\xf0\xec\x97\xab\x97\xaf\x67\xcf\xa1\x0c\x95\x9a\x7e\x96\xa7\x1f\x80\xbc\x44\x26\xe2\x05\x40\x5e\x61\x60\xc0\x4b\xe6\x3c\x86\x82\xd4\x61\x91\x7d\x49\x80\xee\x4e\x6a\x56\x61\x41\xd6\x12\xdf\x5a\xe3\x02\x01\x6e\x74\x40\x1d\x0a\xf2\x56\x8a\x50\x16\x02\xd7\x92\x63\xd6\x0c\xbe\x00\xa9\x65\x90\x4c\x65\x9e\x33\x85\xc5\xc5\x7b\x53\x41\x06\x85\xd3\x4b\x6b\xfd\x95\x11\x08\x33\x67\x44\xcd\x03\xcc\x9c\xe4\x52\x2f\xe1\x27\xe9\x43\x4e\x13\x28\x2d\x50\x52\xaf\xc0\xa1\x2a\x88\x2f\x8d\x0b\xbc\x0e\x20\xb9\xd1\x04\xc2\xc6\x62\x41\x64\xc5\x96\x48\xad\x5e\x12\x28\x1d\x2e\x0a\x52\x86\x60\xfd\xd7\x94\x72\xa1\x27\xcc\x5a\xcf\x8d\xc0\x09\x37\x15\x6d\x90\x9e\xda\xe4\xd1\xd3\x6e\x92\x46\x73\x9e\x2e\xd8\x3a\x5e\x64\x4f\x9f\xbc\x7b\xfa\x64\x12\x0d\xee\x10\x68\xae\xa0\xa5\x11\x36\x0a\x7d\x89\x18\x48\x7b\xfb\xd8\xf1\x5f\x5e\xa0\x92\x6b\x37\xd1\x18\xa8\xb6\x15\x9d\xd7\xaa\x62\xdf\x3e\x9e\x7c\x35\x79\x4c\xb9\xf7\x69\x3c\xa9\xa4\x9e\x70\xef\x93\x9d\x46\xa1\x9c\x76\x31\xc9\xe7\x46\x6c\x5a\x0a\x1e\x79\x90\x46\x03\x57\xcc\xfb\x82\xb4\xc3\x96\x20\x40\x2e\xe4\xba\x9b\x8b\x51\x61\x52\xa3\xdb\xce\x1e\xce\xab\xba\xd2\x1e\xa4\xcf\x2a\x33\x97\x0a\xe3\x15\x47\x1d\xd0\xa1\xd8\x59\xd3\xb7\x2a\x42\x4b\xa6\x16\x7b\xb0\x98\x46\x17\x1d\xae\x09\x1c\xb9\x2d\xbc\xe5\xc5\x81\x81\x85\x71\x15\xb0\x66\x53\x05\x21\x50\x61\x28\x8d\x28\x88\x35\x3e\x1c\xf8\xda\xa7\xb5\x90\xa8\xc4\x11\x22\xc6\x8c\xcd\x51\x75\xa8\x66\x40\xa6\x3f\xb3\x0a\x73\xda\x0c\x7a\x56\x1c\x48\xe8\x8c\xea\xb1\x0b\x90\x4b\x6d\xeb\xd0\x33\x01\xed\xf3\x11\xff\x93\xde\xf9\xd6\x7a\x63\xa0\x1f\x91\x32\x3a\xe0\xbb\x13\xf3\x56\x31\x8e\xa5\x51\x02\x5d\x41\xfa\x20\xb4\x67\x63\x54\xc8\xf5\x91\x86\xe9\xe6\x58\xca\xfe\x69\xdc\x0a\x9e\x57\x4c\xaa\xfb\xd7\x17\xa3\x9b\xbb\x09\x3c\x60\xe2\x56\x85\x01\xd6\x4c\xd5\x78\x37\xf9\x01\xf2\x07\x59\x06\xb9\xed\x28\x97\xa8\x6c\x7c\xb8\x04\xd3\xcb\xf8\xe4\xbe\x2c\xa5\x87\x86\x26\x48\x0f\x52\xaf\x99\x92\x22\xa7\x76\x0a\x59\x76\xcf\xb1\xbc\xba\x1a\x29\x86\x6d\xbc\x38\x27\xfb\x81\xd9\xcd\xf2\x03\xbd\xff\xab\xfc\xfd\xc1\xcc\xa1\x39\xb9\xc6\xdd\x7a\x3a\x0c\x3f\xf9\xdd\xcf\x4a\xa3\xc7\xde\x39\x2a\xb4\xd1\xec\xa7\xbf\xfb\x2b\x53\x59\xa6\x37\x0d\xf1\xfb\x3f\xbd\x78\xf2\xf6\x7f\x7b\x41\xb4\x65\xc0\xdd\xf5\xdd\xc1\x79\x54\xc8\x43\x53\xc7\xd4\x2a\x48\x1b\xeb\x8e\x5e\x51\xf2\x0e\x19\x2b\x8a\x44\x84\xb4\xe1\xd8\x0e\x3b\x13\xe0\xe5\x3f\x58\x90\x8b\xc7\x27\x6c\x01\xe4\xc6\x36\xa5\x58\xfb\x1a\x58\xd5\x73\x14\xf3\xac\xa9\x9f\xac\x93\x1e\x09\x5c\x5f\x83\x5c\x00\xfe\x0d\x93\xae\xfa\xe9\x43\xdd\xdc\x24\x5a\x28\xae\xaf\x01\xb5\x80\x9b\x9b\xe9\x8f\xf5\x1c\x9f\x7d\x07\xcf\xb7\x30\x78\x74\xa9\x75\xcd\xd4\xe7\x39\x4d\x6e\x3f\x8c\x95\x65\x9b\xe5\x10\x9f\x34\x3f\xc0\x64\xc6\x36\xd9\xa5\xcf\x5e\x9b\x3a\x7b\x61\xe0\xd1\xec\xf2\xf5\x8b\xdb\xa9\x34\xaf\xb6\x5e\x3e\x0e\x3d\x2a\x85\x6e\x88\xd3\x7b\xcc\x00\xaf\xdf\x5a\xd0\x96\x4b\xcf\x7b\xf1\x0c\x3e\xb5\x56\xb2\x92\x01\xc5\x10\xa1\x1d\xd0\x00\xa3\x3f\x3a\xd4\x71\xc8\x86\xb8\xed\xd3\xf2\x81\xf9\xf2\xb6\x5c\x3a\x06\xf5\xd1\xfa\x3d\xa2\x46\xc8\xa4\xe4\xed\x64\x22\xed\x4e\x9f\xa6\x31\x56\x1a\x25\x6f\xc3\x51\x3b\xc2\x9c\xa6\x35\x4a\xcc\x62\x96\xc4\xcf\x97\x73\x8e\x80\x23\xdc\xa9\x84\x6a\xbe\x87\xc6\x39\x06\x1a\x9f\x83\x07\xc1\x0e\x62\x90\xcf\x47\x45\xf1\x98\xd0\x9a\xd5\x2a\x9c\xa3\xd6\x31\xf0\x14\xbd\x57\x11\x39\x92\x5e\xc9\xeb\xa0\x60\xbb\x90\x61\x4a\x23\x48\xb6\x36\x1b\xb6\x44\x77\x9b\x60\x7d\xb0\x3e\x6e\xaf\x12\x6e\x04\xb1\x3a\x8f\x27\xa5\xda\x07\x0c\x91\xf9\x70\x99\x72\x9a\xac\xf5\x16\x09\x27\x3e\xb9\x46\xae\x73\xce\x2d\x59\xf6\xea\x21\x5e\x22\x5f\xcd\xcd\xbb\x53\xa5\xca\x5e\x11\x6d\x7c\x57\x30\x6f\x97\x75\xe2\x07\x57\x23\xe9\x29\xe6\xe2\xdf\xf7\xc0\x96\x0e\x11\x82\x81\x50\x62\xbf\x1f\x76\xd0\xb3\xda\x6b\x94\x29\x5c\x32\x45\x83\xf1\xb4\xbf\xca\x04\x98\x06\x74\x95\x07\xa6\x05\x70\xa3\x85\x8c\x81\xf2\x39\x65\xbd\xf0\xfe\x18\x9d\xaa\x04\x07\xa2\x74\x70\xf3\x30\x48\xb1\x14\x5c\x3a\x53\x5b\xbc\x53\xbc\xe6\x75\x08\xef\x5b\x6d\xed\x48\xfa\x4c\x49\xbd\xda\xea\xbf\x44\x8d\x8e\x05\x24\x60\x34\x57\x92\xaf\x8a\x87\xa1\x94\x7e\x12\x0f\xca\x49\xd7\xc8\xa2\x6f\xa8\x4d\x7d\x2f\xf2\x70\xfa\xa2\x5d\x01\xbf\xd6\x26\xb0\x08\xc8\x69\x32\x7e\x7e\xd3\xe0\xae\x5b\x68\xdb\x0b\xdd\x26\x52\x1f\xe4\xbc\x1d\x7c\xe3\x51\x8b\x37\xcd\x8a\xa2\x49\xbe\x87\xd3\xa6\xe1\xf3\xd1\xdb\xe9\xb9\x99\xd3\xe8\x7c\xaf\x05\xb9\x0f\xda\x1b\xee\x0c\xe2\x69\xc0\xbb\xc3\x22\xa7\xa9\x71\x9a\xd3\xd4\xe6\xfe\x37\x00\x00\xff\xff\x96\x98\x49\xff\xfe\x16\x00\x00")

func pricingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pricingHtml,
		"pricing.html",
	)
}

func pricingHtml() (*asset, error) {
	bytes, err := pricingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pricing.html", size: 5886, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"eula.html":        eulaHtml,
	"index.html":       indexHtml,
	"offerletter.html": offerletterHtml,
	"pricing.html":     pricingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"eula.html":        {eulaHtml, map[string]*bintree{}},
	"index.html":       {indexHtml, map[string]*bintree{}},
	"offerletter.html": {offerletterHtml, map[string]*bintree{}},
	"pricing.html":     {pricingHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
